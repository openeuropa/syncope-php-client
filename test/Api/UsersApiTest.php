<?php
/**
 * UsersApiTest.
 * PHP version 5
 *
 * @category Class
 * @package OpenEuropa\SyncopePhpClient
 * @author OpenAPI Generator team
 * @link https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenEuropa\SyncopePhpClient\Test\Api;

use \OpenEuropa\SyncopePhpClient\Configuration;
use \OpenEuropa\SyncopePhpClient\ApiException;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * UsersApiTest Class Doc Comment.
 *
 * @category Class.
 * @package OpenEuropa\SyncopePhpClient
 * @author OpenAPI Generator team
 * @link https://openapi-generator.tech
 */
class UsersApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases.
     */
    public static function setUpBeforeClass()  {
    }

    /**
     * Setup before running each test case.
     */
    public function setUp()  {
    }

    /**
     * Clean up after running each test case.
     */
    public function tearDown()  {
    }

    /**
     * Clean up after running all test cases.
     */
    public static function tearDownAfterClass()  {
    }

    /**
     * Test case for associateUser.
     *
     * Executes resource-related operations on given entity..
     *
     */
    public function testAssociateUser()  {
    }

    /**
     * Test case for createUser.
     *
     * Creates a new user..
     *
     */
    public function testCreateUser()  {
    }

    /**
     * Test case for deassociateUser.
     *
     * Executes resource-related operations on given entity..
     *
     */
    public function testDeassociateUser()  {
    }

    /**
     * Test case for deleteUser.
     *
     * Deletes any object matching provided key..
     *
     */
    public function testDeleteUser()  {
    }

    /**
     * Test case for deleteUserAttribute.
     *
     * Deletes the attribute, owned by the given any object, for the given schema type and schema..
     *
     */
    public function testDeleteUserAttribute()  {
    }

    /**
     * Test case for readUser.
     *
     * Reads the any object matching the provided key..
     *
     */
    public function testReadUser()  {
    }

    /**
     * Test case for readUserAttribute.
     *
     * Reads the attribute, owned by the given any object, for the given schema type and schema.   Note that for the UserService, GroupService and AnyObjectService subclasses, if the key parameter  looks like a UUID then it is interpreted as as key, otherwise as a (user)name..
     *
     */
    public function testReadUserAttribute()  {
    }

    /**
     * Test case for readUserAttributes.
     *
     * Reads the list of attributes owned by the given any object for the given schema type.   Note that for the UserService, GroupService and AnyObjectService subclasses, if the key parameter  looks like a UUID then it is interpreted as as key, otherwise as a (user)name..
     *
     */
    public function testReadUserAttributes()  {
    }

    /**
     * Test case for searchUser.
     *
     * Returns a paged list of any objects matching the given query..
     *
     */
    public function testSearchUser()  {
    }

    /**
     * Test case for statusUpdate.
     *
     * Performs a status update on given user..
     *
     */
    public function testStatusUpdate()  {
    }

    /**
     * Test case for updateUser.
     *
     * Updates user matching the provided key..
     *
     */
    public function testUpdateUser()  {
    }

    /**
     * Test case for updateUserAttribute.
     *
     * Adds or replaces the attribute, owned by the given any object, for the given schema type and schema..
     *
     */
    public function testUpdateUserAttribute()  {
    }

    /**
     * Test case for updateUser_0.
     *
     * Updates user matching the provided key..
     *
     */
    public function testUpdateUser0()  {
    }
}
