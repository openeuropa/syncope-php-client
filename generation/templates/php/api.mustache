<?php

/**
 * {{classname}}
 * PHP version 5
 *
 * @category Class
 * @package {{invokerPackage}}
 * @author OpenAPI Generator team
 * @link https://openapi-generator.tech
 */

namespace {{apiPackage}};

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use {{invokerPackage}}\ApiException;
use {{invokerPackage}}\Configuration;
use {{invokerPackage}}\HeaderSelector;
use {{invokerPackage}}\ObjectSerializer;

/**
 * {{classname}} Class Doc Comment.
 *
 * @category Class
 * @package {{invokerPackage}}
 * @author OpenAPI Generator team
 * @link https://openapi-generator.tech
 */
{{#operations}}class {{classname}} {
  /**
   * @var ClientInterface
   */
  protected $client;

  /**
   * @var Configuration
   */
  protected $config;

  /**
   * @var HeaderSelector
   */
  protected $headerSelector;

  /**
   * @param ClientInterface $client
   * @param Configuration $config
   * @param HeaderSelector $selector
   */
  public function __construct(
    ClientInterface $client = NULL,
    Configuration $config = NULL,
    HeaderSelector $selector = NULL
  ) {
    $this->client = $client ?: new Client();
    $this->config = $config ?: new Configuration();
    $this->headerSelector = $selector ?: new HeaderSelector();
  }

  /**
   * @return Configuration.
   */
  public function getConfig() {
    return $this->config;
  }

  {{#operation}}
  /**
   * Operation {{{operationId}}}
  {{#summary}}
   *
   * {{{summary}}}
  {{/summary}}
   *
  {{#description}}
   * {{.}}
   *
  {{/description}}
  {{#allParams}}
   * @param  {{dataType}} ${{paramName}}{{#description}} {{description}}{{/description}}{{^description}} {{paramName}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
  {{/allParams}}
   *
   * @throws \{{invokerPackage}}\ApiException on non-2xx response
   * @throws \InvalidArgumentException
   * @return {{#returnType}}{{#responses}}{{#dataType}}{{^-first}}|{{/-first}}{{/dataType}}{{{dataType}}}{{/responses}}{{/returnType}}{{^returnType}}void{{/returnType}}
   */
  public function {{operationId}}({{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    $request = $this->{{operationId}}Request({{#allParams}}${{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

    try {
      $options = $this->createHttpClientOption();
      try {
        $response = $this->client->send($request, $options);
      }
      catch (RequestException $e) {
        throw new ApiException(
          "[{$e->getCode()}] {$e->getMessage()}",
          $e->getCode(),
          $e->getResponse() ? $e->getResponse()->getHeaders() : NULL,
          $e->getResponse() ? $e->getResponse()->getBody()->getContents() : NULL
        );
      }

      $statusCode = $response->getStatusCode();

      if ($statusCode < 200 || $statusCode > 299) {
        throw new ApiException(
          sprintf(
            '[%d] Error connecting to the API (%s)',
            $statusCode,
            $request->getUri()
          ),
          $statusCode,
          $response->getHeaders(),
          $response->getBody()
        );
      }
      {{#returnType}}
  {{#responses}}
      {{#-first}}

      $responseBody = $response->getBody();
      switch($statusCode) {
      {{/-first}}
      {{#dataType}}
        {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
          if ('{{dataType}}' === '\SplFileObject') {
            $content = $responseBody; //stream goes to serializer
          } else {
            $content = $responseBody->getContents();
            if ('{{dataType}}' !== 'string') {
                $content = json_decode($content);
            }
          }

          return [
            ObjectSerializer::deserialize($content, '{{dataType}}', []),
            $response->getStatusCode(),
            $response->getHeaders()
          ];
      {{/dataType}}
      {{#-last}}
      }
      {{/-last}}
  {{/responses}}

      $returnType = '{{returnType}}';
      $responseBody = $response->getBody();
      if ($returnType === '\SplFileObject') {
        $content = $responseBody; //stream goes to serializer
      } else {
        $content = $responseBody->getContents();
        if ($returnType !== 'string') {
          $content = json_decode($content);
        }
      }

      return [
        ObjectSerializer::deserialize($content, $returnType, []),
        $response->getStatusCode(),
        $response->getHeaders()
      ];
      {{/returnType}}
      {{^returnType}}

      return [NULL, $statusCode, $response->getHeaders()];
      {{/returnType}}

    }
    catch (ApiException $e) {
      switch ($e->getCode()) {
        {{#responses}}
        {{#dataType}}
        {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
          $data = ObjectSerializer::deserialize(
            $e->getResponseBody(),
            '{{dataType}}',
            $e->getResponseHeaders()
          );
          $e->setResponseObject($data);
          break;
        {{/dataType}}
        {{/responses}}
      }
      throw $e;
    }
  }

  /**
   * Create request for operation '{{{operationId}}}'
   *
  {{#allParams}}
   * @param  {{dataType}} ${{paramName}}{{#description}} {{description}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
  {{/allParams}}
   *
   * @throws \InvalidArgumentException
   *
   * @return \GuzzleHttp\Psr7\Request
   */
  protected function {{operationId}}Request({{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
      {{#allParams}}
      {{#required}}
      // Verify the required parameter '{{paramName}}' is set.
    if (${{paramName}} === NULL || (is_array(${{paramName}}) && count(${{paramName}}) === 0)) {
      throw new \InvalidArgumentException(
        'Missing the required parameter ${{paramName}} when calling {{operationId}}'
      );
    }
    {{/required}}
    {{#hasValidation}}
    {{#maxLength}}
    if ({{^required}}${{paramName}} !== NULL && {{/required}}strlen(${{paramName}}) > {{maxLength}}) {
      throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
    }
    {{/maxLength}}
    {{#minLength}}
    if ({{^required}}${{paramName}} !== NULL && {{/required}}strlen(${{paramName}}) < {{minLength}}) {
      throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
    }
    {{/minLength}}
    {{#maximum}}
    if ({{^required}}${{paramName}} !== NULL && {{/required}}${{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
      throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
    }
    {{/maximum}}
    {{#minimum}}
    if ({{^required}}${{paramName}} !== NULL && {{/required}}${{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
      throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
    }
    {{/minimum}}
    {{#pattern}}
    if ({{^required}}${{paramName}} !== NULL && {{/required}}!preg_match("{{{pattern}}}", ${{paramName}})) {
      throw new \InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
    }
    {{/pattern}}
    {{#maxItems}}
    if ({{^required}}${{paramName}} !== NULL && {{/required}}count(${{paramName}}) > {{maxItems}}) {
      throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
    }
    {{/maxItems}}
    {{#minItems}}
    if ({{^required}}${{paramName}} !== NULL && {{/required}}count(${{paramName}}) < {{minItems}}) {
      throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
    }
    {{/minItems}}

    {{/hasValidation}}
    {{/allParams}}

    $resourcePath = '{{{path}}}';
    $formParams = [];
    $queryParams = [];
    $headerParams = [];
    $httpBody = '';
    $multipart = FALSE;

    {{#queryParams}}
    // query params
    {{#collectionFormat}}
    if (is_array(${{paramName}})) {
      ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}', true);
    }
    {{/collectionFormat}}
    if (${{paramName}} !== NULL) {
      $queryParams['{{baseName}}'] = ObjectSerializer::toQueryValue(${{paramName}});
    }
    {{/queryParams}}
    {{#headerParams}}
    // header params
    {{#collectionFormat}}
    if (is_array(${{paramName}})) {
      ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
    }
    {{/collectionFormat}}
    if (${{paramName}} !== NULL) {
      $headerParams['{{baseName}}'] = ObjectSerializer::toHeaderValue(${{paramName}});
    }
    {{/headerParams}}

    {{#pathParams}}
    // path params
    {{#collectionFormat}}
    if (is_array(${{paramName}})) {
      ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
    }
    {{/collectionFormat}}
    if (${{paramName}} !== NULL) {
      $resourcePath = str_replace(
        '{' . '{{baseName}}' . '}',
        ObjectSerializer::toPathValue(${{paramName}}),
        $resourcePath
      );
    }
    {{/pathParams}}

    {{#formParams}}
    // form params
    if (${{paramName}} !== NULL) {
      {{#isFile}}
      $multipart = true;
      $formParams['{{baseName}}'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue(${{paramName}}), 'rb');
      {{/isFile}}
      {{^isFile}}
      $formParams['{{baseName}}'] = ObjectSerializer::toFormValue(${{paramName}});
      {{/isFile}}
    }
    {{/formParams}}
    // body params
    $_tempBody = NULL;
    {{#bodyParams}}
    if (isset(${{paramName}})) {
      $_tempBody = ${{paramName}};
    }
    {{/bodyParams}}

    if ($multipart) {
      $headers = $this->headerSelector->selectHeadersForMultipart(
        [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}]
      );
    } else {
      $headers = $this->headerSelector->selectHeaders(
        [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}],
        [{{#consumes}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}]
      );
    }

    // For model (json/xml).
    if (isset($_tempBody)) {
      // $_tempBody is the method argument, if present.
      $httpBody = $_tempBody;
      // \stdClass has no __toString(), so we should encode it manually.
      if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
        $httpBody = \GuzzleHttp\json_encode($httpBody);
      }
    } elseif (count($formParams) > 0) {
      if ($multipart) {
        $multipartContents = [];
        foreach ($formParams as $formParamName => $formParamValue) {
          $multipartContents[] = [
            'name' => $formParamName,
            'contents' => $formParamValue
          ];
        }
        // For HTTP post (form).
        $httpBody = new MultipartStream($multipartContents);

      } elseif ($headers['Content-Type'] === 'application/json') {
        $httpBody = \GuzzleHttp\json_encode($formParams);

      } else {
        // For HTTP post (form).
        $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
      }
    }

    {{#authMethods}}
    {{#isApiKey}}
    // This endpoint requires API key authentication.
    $apiKey = $this->config->getApiKeyWithPrefix('{{keyParamName}}');
    if ($apiKey !== NULL) {
      {{#isKeyInHeader}}$headers['{{keyParamName}}'] = $apiKey;{{/isKeyInHeader}}{{#isKeyInQuery}}$queryParams['{{keyParamName}}'] = $apiKey;{{/isKeyInQuery}}
    }
    {{/isApiKey}}
    {{#isBasic}}
    // This endpoint requires HTTP basic authentication.
    if ($this->config->getUsername() !== NULL || $this->config->getPassword() !== NULL) {
      $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
    }
    {{/isBasic}}
    {{#isOAuth}}
    // This endpoint requires OAuth (access token).
    if ($this->config->getAccessToken() !== NULL) {
      $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
    }
    {{/isOAuth}}
    {{/authMethods}}

    $defaultHeaders = [];
    if ($this->config->getUserAgent()) {
      $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
    }

    $headers = array_merge(
      $defaultHeaders,
      $headerParams,
      $headers
    );

    $query = \GuzzleHttp\Psr7\build_query($queryParams);
    return new Request(
      '{{httpMethod}}',
      $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
      $headers,
      $httpBody
    );
  }

  {{/operation}}
  /**
   * Create http client option
   *
   * @throws \RuntimeException on file opening failure
   * @return array of http client options
   */
  protected function createHttpClientOption() {
    $options = [];
    if ($this->config->getDebug()) {
      $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
      if (!$options[RequestOptions::DEBUG]) {
        throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
      }
    }

    return $options;
  }

}
{{/operations}}
