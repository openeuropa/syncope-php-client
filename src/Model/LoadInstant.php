<?php
/**
 * LoadInstant
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * LoadInstant Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoadInstant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoadInstant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uptime' => 'int',
        'systemLoadAverage' => 'double',
        'totalMemory' => 'int',
        'freeMemory' => 'int',
        'maxMemory' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uptime' => 'int64',
        'systemLoadAverage' => 'double',
        'totalMemory' => 'int64',
        'freeMemory' => 'int64',
        'maxMemory' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uptime' => 'uptime',
        'systemLoadAverage' => 'systemLoadAverage',
        'totalMemory' => 'totalMemory',
        'freeMemory' => 'freeMemory',
        'maxMemory' => 'maxMemory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uptime' => 'setUptime',
        'systemLoadAverage' => 'setSystemLoadAverage',
        'totalMemory' => 'setTotalMemory',
        'freeMemory' => 'setFreeMemory',
        'maxMemory' => 'setMaxMemory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uptime' => 'getUptime',
        'systemLoadAverage' => 'getSystemLoadAverage',
        'totalMemory' => 'getTotalMemory',
        'freeMemory' => 'getFreeMemory',
        'maxMemory' => 'getMaxMemory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uptime'] = isset($data['uptime']) ? $data['uptime'] : null;
        $this->container['systemLoadAverage'] = isset($data['systemLoadAverage']) ? $data['systemLoadAverage'] : null;
        $this->container['totalMemory'] = isset($data['totalMemory']) ? $data['totalMemory'] : null;
        $this->container['freeMemory'] = isset($data['freeMemory']) ? $data['freeMemory'] : null;
        $this->container['maxMemory'] = isset($data['maxMemory']) ? $data['maxMemory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uptime
     *
     * @return int|null
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param int|null $uptime uptime
     *
     * @return $this
     */
    public function setUptime($uptime)
    {
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets systemLoadAverage
     *
     * @return double|null
     */
    public function getSystemLoadAverage()
    {
        return $this->container['systemLoadAverage'];
    }

    /**
     * Sets systemLoadAverage
     *
     * @param double|null $systemLoadAverage systemLoadAverage
     *
     * @return $this
     */
    public function setSystemLoadAverage($systemLoadAverage)
    {
        $this->container['systemLoadAverage'] = $systemLoadAverage;

        return $this;
    }

    /**
     * Gets totalMemory
     *
     * @return int|null
     */
    public function getTotalMemory()
    {
        return $this->container['totalMemory'];
    }

    /**
     * Sets totalMemory
     *
     * @param int|null $totalMemory totalMemory
     *
     * @return $this
     */
    public function setTotalMemory($totalMemory)
    {
        $this->container['totalMemory'] = $totalMemory;

        return $this;
    }

    /**
     * Gets freeMemory
     *
     * @return int|null
     */
    public function getFreeMemory()
    {
        return $this->container['freeMemory'];
    }

    /**
     * Sets freeMemory
     *
     * @param int|null $freeMemory freeMemory
     *
     * @return $this
     */
    public function setFreeMemory($freeMemory)
    {
        $this->container['freeMemory'] = $freeMemory;

        return $this;
    }

    /**
     * Gets maxMemory
     *
     * @return int|null
     */
    public function getMaxMemory()
    {
        return $this->container['maxMemory'];
    }

    /**
     * Sets maxMemory
     *
     * @param int|null $maxMemory maxMemory
     *
     * @return $this
     */
    public function setMaxMemory($maxMemory)
    {
        $this->container['maxMemory'] = $maxMemory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


