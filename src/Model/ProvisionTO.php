<?php
/**
 * ProvisionTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * ProvisionTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProvisionTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProvisionTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'anyType' => 'string',
        'objectClass' => 'string',
        'syncToken' => 'string',
        'ignoreCaseMatch' => 'bool',
        'uidOnCreate' => 'string',
        'mapping' => '\SyncopePhpClient\Model\MappingTO',
        'auxClasses' => 'string[]',
        'virSchemas' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'anyType' => null,
        'objectClass' => null,
        'syncToken' => null,
        'ignoreCaseMatch' => null,
        'uidOnCreate' => null,
        'mapping' => null,
        'auxClasses' => null,
        'virSchemas' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'anyType' => 'anyType',
        'objectClass' => 'objectClass',
        'syncToken' => 'syncToken',
        'ignoreCaseMatch' => 'ignoreCaseMatch',
        'uidOnCreate' => 'uidOnCreate',
        'mapping' => 'mapping',
        'auxClasses' => 'auxClasses',
        'virSchemas' => 'virSchemas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'anyType' => 'setAnyType',
        'objectClass' => 'setObjectClass',
        'syncToken' => 'setSyncToken',
        'ignoreCaseMatch' => 'setIgnoreCaseMatch',
        'uidOnCreate' => 'setUidOnCreate',
        'mapping' => 'setMapping',
        'auxClasses' => 'setAuxClasses',
        'virSchemas' => 'setVirSchemas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'anyType' => 'getAnyType',
        'objectClass' => 'getObjectClass',
        'syncToken' => 'getSyncToken',
        'ignoreCaseMatch' => 'getIgnoreCaseMatch',
        'uidOnCreate' => 'getUidOnCreate',
        'mapping' => 'getMapping',
        'auxClasses' => 'getAuxClasses',
        'virSchemas' => 'getVirSchemas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['anyType'] = isset($data['anyType']) ? $data['anyType'] : null;
        $this->container['objectClass'] = isset($data['objectClass']) ? $data['objectClass'] : null;
        $this->container['syncToken'] = isset($data['syncToken']) ? $data['syncToken'] : null;
        $this->container['ignoreCaseMatch'] = isset($data['ignoreCaseMatch']) ? $data['ignoreCaseMatch'] : null;
        $this->container['uidOnCreate'] = isset($data['uidOnCreate']) ? $data['uidOnCreate'] : null;
        $this->container['mapping'] = isset($data['mapping']) ? $data['mapping'] : null;
        $this->container['auxClasses'] = isset($data['auxClasses']) ? $data['auxClasses'] : null;
        $this->container['virSchemas'] = isset($data['virSchemas']) ? $data['virSchemas'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets anyType
     *
     * @return string|null
     */
    public function getAnyType()
    {
        return $this->container['anyType'];
    }

    /**
     * Sets anyType
     *
     * @param string|null $anyType anyType
     *
     * @return $this
     */
    public function setAnyType($anyType)
    {
        $this->container['anyType'] = $anyType;

        return $this;
    }

    /**
     * Gets objectClass
     *
     * @return string|null
     */
    public function getObjectClass()
    {
        return $this->container['objectClass'];
    }

    /**
     * Sets objectClass
     *
     * @param string|null $objectClass objectClass
     *
     * @return $this
     */
    public function setObjectClass($objectClass)
    {
        $this->container['objectClass'] = $objectClass;

        return $this;
    }

    /**
     * Gets syncToken
     *
     * @return string|null
     */
    public function getSyncToken()
    {
        return $this->container['syncToken'];
    }

    /**
     * Sets syncToken
     *
     * @param string|null $syncToken syncToken
     *
     * @return $this
     */
    public function setSyncToken($syncToken)
    {
        $this->container['syncToken'] = $syncToken;

        return $this;
    }

    /**
     * Gets ignoreCaseMatch
     *
     * @return bool|null
     */
    public function getIgnoreCaseMatch()
    {
        return $this->container['ignoreCaseMatch'];
    }

    /**
     * Sets ignoreCaseMatch
     *
     * @param bool|null $ignoreCaseMatch ignoreCaseMatch
     *
     * @return $this
     */
    public function setIgnoreCaseMatch($ignoreCaseMatch)
    {
        $this->container['ignoreCaseMatch'] = $ignoreCaseMatch;

        return $this;
    }

    /**
     * Gets uidOnCreate
     *
     * @return string|null
     */
    public function getUidOnCreate()
    {
        return $this->container['uidOnCreate'];
    }

    /**
     * Sets uidOnCreate
     *
     * @param string|null $uidOnCreate uidOnCreate
     *
     * @return $this
     */
    public function setUidOnCreate($uidOnCreate)
    {
        $this->container['uidOnCreate'] = $uidOnCreate;

        return $this;
    }

    /**
     * Gets mapping
     *
     * @return \SyncopePhpClient\Model\MappingTO|null
     */
    public function getMapping()
    {
        return $this->container['mapping'];
    }

    /**
     * Sets mapping
     *
     * @param \SyncopePhpClient\Model\MappingTO|null $mapping mapping
     *
     * @return $this
     */
    public function setMapping($mapping)
    {
        $this->container['mapping'] = $mapping;

        return $this;
    }

    /**
     * Gets auxClasses
     *
     * @return string[]|null
     */
    public function getAuxClasses()
    {
        return $this->container['auxClasses'];
    }

    /**
     * Sets auxClasses
     *
     * @param string[]|null $auxClasses auxClasses
     *
     * @return $this
     */
    public function setAuxClasses($auxClasses)
    {
        $this->container['auxClasses'] = $auxClasses;

        return $this;
    }

    /**
     * Gets virSchemas
     *
     * @return string[]|null
     */
    public function getVirSchemas()
    {
        return $this->container['virSchemas'];
    }

    /**
     * Sets virSchemas
     *
     * @param string[]|null $virSchemas virSchemas
     *
     * @return $this
     */
    public function setVirSchemas($virSchemas)
    {
        $this->container['virSchemas'] = $virSchemas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


