<?php
/**
 * ItemTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenEuropa\SyncopePhpClient\Model;

use \ArrayAccess;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * ItemTO Class Doc Comment
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'intAttrName' => 'string',
        'extAttrName' => 'string',
        'connObjectKey' => 'bool',
        'password' => 'bool',
        'mandatoryCondition' => 'string',
        'purpose' => 'string',
        'propagationJEXLTransformer' => 'string',
        'pullJEXLTransformer' => 'string',
        'transformers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'intAttrName' => null,
        'extAttrName' => null,
        'connObjectKey' => null,
        'password' => null,
        'mandatoryCondition' => null,
        'purpose' => null,
        'propagationJEXLTransformer' => null,
        'pullJEXLTransformer' => null,
        'transformers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'intAttrName' => 'intAttrName',
        'extAttrName' => 'extAttrName',
        'connObjectKey' => 'connObjectKey',
        'password' => 'password',
        'mandatoryCondition' => 'mandatoryCondition',
        'purpose' => 'purpose',
        'propagationJEXLTransformer' => 'propagationJEXLTransformer',
        'pullJEXLTransformer' => 'pullJEXLTransformer',
        'transformers' => 'transformers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'intAttrName' => 'setIntAttrName',
        'extAttrName' => 'setExtAttrName',
        'connObjectKey' => 'setConnObjectKey',
        'password' => 'setPassword',
        'mandatoryCondition' => 'setMandatoryCondition',
        'purpose' => 'setPurpose',
        'propagationJEXLTransformer' => 'setPropagationJEXLTransformer',
        'pullJEXLTransformer' => 'setPullJEXLTransformer',
        'transformers' => 'setTransformers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'intAttrName' => 'getIntAttrName',
        'extAttrName' => 'getExtAttrName',
        'connObjectKey' => 'getConnObjectKey',
        'password' => 'getPassword',
        'mandatoryCondition' => 'getMandatoryCondition',
        'purpose' => 'getPurpose',
        'propagationJEXLTransformer' => 'getPropagationJEXLTransformer',
        'pullJEXLTransformer' => 'getPullJEXLTransformer',
        'transformers' => 'getTransformers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PURPOSE_BOTH = 'BOTH';
    const PURPOSE_PULL = 'PULL';
    const PURPOSE_PROPAGATION = 'PROPAGATION';
    const PURPOSE_NONE = 'NONE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurposeAllowableValues()
    {
        return [
            self::PURPOSE_BOTH,
            self::PURPOSE_PULL,
            self::PURPOSE_PROPAGATION,
            self::PURPOSE_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['intAttrName'] = isset($data['intAttrName']) ? $data['intAttrName'] : null;
        $this->container['extAttrName'] = isset($data['extAttrName']) ? $data['extAttrName'] : null;
        $this->container['connObjectKey'] = isset($data['connObjectKey']) ? $data['connObjectKey'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['mandatoryCondition'] = isset($data['mandatoryCondition']) ? $data['mandatoryCondition'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['propagationJEXLTransformer'] = isset($data['propagationJEXLTransformer']) ? $data['propagationJEXLTransformer'] : null;
        $this->container['pullJEXLTransformer'] = isset($data['pullJEXLTransformer']) ? $data['pullJEXLTransformer'] : null;
        $this->container['transformers'] = isset($data['transformers']) ? $data['transformers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPurposeAllowableValues();
        if (!is_null($this->container['purpose']) && !in_array($this->container['purpose'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'purpose', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets intAttrName
     *
     * @return string|null
     */
    public function getIntAttrName()
    {
        return $this->container['intAttrName'];
    }

    /**
     * Sets intAttrName
     *
     * @param string|null $intAttrName intAttrName
     *
     * @return $this
     */
    public function setIntAttrName($intAttrName)
    {
        $this->container['intAttrName'] = $intAttrName;

        return $this;
    }

    /**
     * Gets extAttrName
     *
     * @return string|null
     */
    public function getExtAttrName()
    {
        return $this->container['extAttrName'];
    }

    /**
     * Sets extAttrName
     *
     * @param string|null $extAttrName extAttrName
     *
     * @return $this
     */
    public function setExtAttrName($extAttrName)
    {
        $this->container['extAttrName'] = $extAttrName;

        return $this;
    }

    /**
     * Gets connObjectKey
     *
     * @return bool|null
     */
    public function getConnObjectKey()
    {
        return $this->container['connObjectKey'];
    }

    /**
     * Sets connObjectKey
     *
     * @param bool|null $connObjectKey connObjectKey
     *
     * @return $this
     */
    public function setConnObjectKey($connObjectKey)
    {
        $this->container['connObjectKey'] = $connObjectKey;

        return $this;
    }

    /**
     * Gets password
     *
     * @return bool|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param bool|null $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets mandatoryCondition
     *
     * @return string|null
     */
    public function getMandatoryCondition()
    {
        return $this->container['mandatoryCondition'];
    }

    /**
     * Sets mandatoryCondition
     *
     * @param string|null $mandatoryCondition mandatoryCondition
     *
     * @return $this
     */
    public function setMandatoryCondition($mandatoryCondition)
    {
        $this->container['mandatoryCondition'] = $mandatoryCondition;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string|null
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string|null $purpose purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $allowedValues = $this->getPurposeAllowableValues();
        if (!is_null($purpose) && !in_array($purpose, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'purpose', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets propagationJEXLTransformer
     *
     * @return string|null
     */
    public function getPropagationJEXLTransformer()
    {
        return $this->container['propagationJEXLTransformer'];
    }

    /**
     * Sets propagationJEXLTransformer
     *
     * @param string|null $propagationJEXLTransformer propagationJEXLTransformer
     *
     * @return $this
     */
    public function setPropagationJEXLTransformer($propagationJEXLTransformer)
    {
        $this->container['propagationJEXLTransformer'] = $propagationJEXLTransformer;

        return $this;
    }

    /**
     * Gets pullJEXLTransformer
     *
     * @return string|null
     */
    public function getPullJEXLTransformer()
    {
        return $this->container['pullJEXLTransformer'];
    }

    /**
     * Sets pullJEXLTransformer
     *
     * @param string|null $pullJEXLTransformer pullJEXLTransformer
     *
     * @return $this
     */
    public function setPullJEXLTransformer($pullJEXLTransformer)
    {
        $this->container['pullJEXLTransformer'] = $pullJEXLTransformer;

        return $this;
    }

    /**
     * Gets transformers
     *
     * @return string[]|null
     */
    public function getTransformers()
    {
        return $this->container['transformers'];
    }

    /**
     * Sets transformers
     *
     * @param string[]|null $transformers transformers
     *
     * @return $this
     */
    public function setTransformers($transformers)
    {
        $this->container['transformers'] = $transformers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


