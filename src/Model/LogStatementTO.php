<?php
/**
 * LogStatementTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenEuropa\SyncopePhpClient\Model;

use \ArrayAccess;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * LogStatementTO Class Doc Comment
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LogStatementTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LogStatementTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'level' => 'string',
        'loggerName' => 'string',
        'message' => 'string',
        'stackTrace' => 'string',
        'timeMillis' => 'int',
        'threadId' => 'int',
        'threadName' => 'string',
        'threadPriority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'level' => null,
        'loggerName' => null,
        'message' => null,
        'stackTrace' => null,
        'timeMillis' => 'int64',
        'threadId' => 'int64',
        'threadName' => null,
        'threadPriority' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'level' => 'level',
        'loggerName' => 'loggerName',
        'message' => 'message',
        'stackTrace' => 'stackTrace',
        'timeMillis' => 'timeMillis',
        'threadId' => 'threadId',
        'threadName' => 'threadName',
        'threadPriority' => 'threadPriority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'level' => 'setLevel',
        'loggerName' => 'setLoggerName',
        'message' => 'setMessage',
        'stackTrace' => 'setStackTrace',
        'timeMillis' => 'setTimeMillis',
        'threadId' => 'setThreadId',
        'threadName' => 'setThreadName',
        'threadPriority' => 'setThreadPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'level' => 'getLevel',
        'loggerName' => 'getLoggerName',
        'message' => 'getMessage',
        'stackTrace' => 'getStackTrace',
        'timeMillis' => 'getTimeMillis',
        'threadId' => 'getThreadId',
        'threadName' => 'getThreadName',
        'threadPriority' => 'getThreadPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LEVEL_OFF = 'OFF';
    const LEVEL_FATAL = 'FATAL';
    const LEVEL_ERROR = 'ERROR';
    const LEVEL_WARN = 'WARN';
    const LEVEL_INFO = 'INFO';
    const LEVEL_DEBUG = 'DEBUG';
    const LEVEL_TRACE = 'TRACE';
    const LEVEL_ALL = 'ALL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLevelAllowableValues()
    {
        return [
            self::LEVEL_OFF,
            self::LEVEL_FATAL,
            self::LEVEL_ERROR,
            self::LEVEL_WARN,
            self::LEVEL_INFO,
            self::LEVEL_DEBUG,
            self::LEVEL_TRACE,
            self::LEVEL_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['loggerName'] = isset($data['loggerName']) ? $data['loggerName'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['stackTrace'] = isset($data['stackTrace']) ? $data['stackTrace'] : null;
        $this->container['timeMillis'] = isset($data['timeMillis']) ? $data['timeMillis'] : null;
        $this->container['threadId'] = isset($data['threadId']) ? $data['threadId'] : null;
        $this->container['threadName'] = isset($data['threadName']) ? $data['threadName'] : null;
        $this->container['threadPriority'] = isset($data['threadPriority']) ? $data['threadPriority'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($this->container['level']) && !in_array($this->container['level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets level
     *
     * @return string|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string|null $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($level) && !in_array($level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets loggerName
     *
     * @return string|null
     */
    public function getLoggerName()
    {
        return $this->container['loggerName'];
    }

    /**
     * Sets loggerName
     *
     * @param string|null $loggerName loggerName
     *
     * @return $this
     */
    public function setLoggerName($loggerName)
    {
        $this->container['loggerName'] = $loggerName;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets stackTrace
     *
     * @return string|null
     */
    public function getStackTrace()
    {
        return $this->container['stackTrace'];
    }

    /**
     * Sets stackTrace
     *
     * @param string|null $stackTrace stackTrace
     *
     * @return $this
     */
    public function setStackTrace($stackTrace)
    {
        $this->container['stackTrace'] = $stackTrace;

        return $this;
    }

    /**
     * Gets timeMillis
     *
     * @return int|null
     */
    public function getTimeMillis()
    {
        return $this->container['timeMillis'];
    }

    /**
     * Sets timeMillis
     *
     * @param int|null $timeMillis timeMillis
     *
     * @return $this
     */
    public function setTimeMillis($timeMillis)
    {
        $this->container['timeMillis'] = $timeMillis;

        return $this;
    }

    /**
     * Gets threadId
     *
     * @return int|null
     */
    public function getThreadId()
    {
        return $this->container['threadId'];
    }

    /**
     * Sets threadId
     *
     * @param int|null $threadId threadId
     *
     * @return $this
     */
    public function setThreadId($threadId)
    {
        $this->container['threadId'] = $threadId;

        return $this;
    }

    /**
     * Gets threadName
     *
     * @return string|null
     */
    public function getThreadName()
    {
        return $this->container['threadName'];
    }

    /**
     * Sets threadName
     *
     * @param string|null $threadName threadName
     *
     * @return $this
     */
    public function setThreadName($threadName)
    {
        $this->container['threadName'] = $threadName;

        return $this;
    }

    /**
     * Gets threadPriority
     *
     * @return int|null
     */
    public function getThreadPriority()
    {
        return $this->container['threadPriority'];
    }

    /**
     * Sets threadPriority
     *
     * @param int|null $threadPriority threadPriority
     *
     * @return $this
     */
    public function setThreadPriority($threadPriority)
    {
        $this->container['threadPriority'] = $threadPriority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


