<?php
/**
 * WorkflowFormTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * WorkflowFormTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkflowFormTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkflowFormTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'taskId' => 'string',
        'key' => 'string',
        'createTime' => '\DateTime',
        'dueDate' => '\DateTime',
        'owner' => 'string',
        'userTO' => '\SyncopePhpClient\Model\UserTO',
        'userPatch' => '\SyncopePhpClient\Model\UserPatch',
        'workflowFormProperties' => '\SyncopePhpClient\Model\WorkflowFormPropertyTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'username' => null,
        'taskId' => null,
        'key' => null,
        'createTime' => 'date-time',
        'dueDate' => 'date-time',
        'owner' => null,
        'userTO' => null,
        'userPatch' => null,
        'workflowFormProperties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'taskId' => 'taskId',
        'key' => 'key',
        'createTime' => 'createTime',
        'dueDate' => 'dueDate',
        'owner' => 'owner',
        'userTO' => 'userTO',
        'userPatch' => 'userPatch',
        'workflowFormProperties' => 'workflowFormProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'taskId' => 'setTaskId',
        'key' => 'setKey',
        'createTime' => 'setCreateTime',
        'dueDate' => 'setDueDate',
        'owner' => 'setOwner',
        'userTO' => 'setUserTO',
        'userPatch' => 'setUserPatch',
        'workflowFormProperties' => 'setWorkflowFormProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'taskId' => 'getTaskId',
        'key' => 'getKey',
        'createTime' => 'getCreateTime',
        'dueDate' => 'getDueDate',
        'owner' => 'getOwner',
        'userTO' => 'getUserTO',
        'userPatch' => 'getUserPatch',
        'workflowFormProperties' => 'getWorkflowFormProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['taskId'] = isset($data['taskId']) ? $data['taskId'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
        $this->container['dueDate'] = isset($data['dueDate']) ? $data['dueDate'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['userTO'] = isset($data['userTO']) ? $data['userTO'] : null;
        $this->container['userPatch'] = isset($data['userPatch']) ? $data['userPatch'] : null;
        $this->container['workflowFormProperties'] = isset($data['workflowFormProperties']) ? $data['workflowFormProperties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets taskId
     *
     * @return string|null
     */
    public function getTaskId()
    {
        return $this->container['taskId'];
    }

    /**
     * Sets taskId
     *
     * @param string|null $taskId taskId
     *
     * @return $this
     */
    public function setTaskId($taskId)
    {
        $this->container['taskId'] = $taskId;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return \DateTime|null
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param \DateTime|null $createTime createTime
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate dueDate
     *
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets userTO
     *
     * @return \SyncopePhpClient\Model\UserTO|null
     */
    public function getUserTO()
    {
        return $this->container['userTO'];
    }

    /**
     * Sets userTO
     *
     * @param \SyncopePhpClient\Model\UserTO|null $userTO userTO
     *
     * @return $this
     */
    public function setUserTO($userTO)
    {
        $this->container['userTO'] = $userTO;

        return $this;
    }

    /**
     * Gets userPatch
     *
     * @return \SyncopePhpClient\Model\UserPatch|null
     */
    public function getUserPatch()
    {
        return $this->container['userPatch'];
    }

    /**
     * Sets userPatch
     *
     * @param \SyncopePhpClient\Model\UserPatch|null $userPatch userPatch
     *
     * @return $this
     */
    public function setUserPatch($userPatch)
    {
        $this->container['userPatch'] = $userPatch;

        return $this;
    }

    /**
     * Gets workflowFormProperties
     *
     * @return \SyncopePhpClient\Model\WorkflowFormPropertyTO[]|null
     */
    public function getWorkflowFormProperties()
    {
        return $this->container['workflowFormProperties'];
    }

    /**
     * Sets workflowFormProperties
     *
     * @param \SyncopePhpClient\Model\WorkflowFormPropertyTO[]|null $workflowFormProperties workflowFormProperties
     *
     * @return $this
     */
    public function setWorkflowFormProperties($workflowFormProperties)
    {
        $this->container['workflowFormProperties'] = $workflowFormProperties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


