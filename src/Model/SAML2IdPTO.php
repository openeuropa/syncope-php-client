<?php
/**
 * SAML2IdPTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenEuropa\SyncopePhpClient\Model;

use \ArrayAccess;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * SAML2IdPTO Class Doc Comment
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SAML2IdPTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SAML2IdPTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'entityID' => 'string',
        'name' => 'string',
        'metadata' => 'string',
        'createUnmatching' => 'bool',
        'updateMatching' => 'bool',
        'selfRegUnmatching' => 'bool',
        'useDeflateEncoding' => 'bool',
        'supportUnsolicited' => 'bool',
        'bindingType' => 'string',
        'logoutSupported' => 'bool',
        'userTemplate' => '\OpenEuropa\SyncopePhpClient\Model\UserTO',
        'connObjectKeyItem' => '\OpenEuropa\SyncopePhpClient\Model\ItemTO',
        'items' => '\OpenEuropa\SyncopePhpClient\Model\ItemTO[]',
        'actions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'entityID' => null,
        'name' => null,
        'metadata' => null,
        'createUnmatching' => null,
        'updateMatching' => null,
        'selfRegUnmatching' => null,
        'useDeflateEncoding' => null,
        'supportUnsolicited' => null,
        'bindingType' => null,
        'logoutSupported' => null,
        'userTemplate' => null,
        'connObjectKeyItem' => null,
        'items' => null,
        'actions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'entityID' => 'entityID',
        'name' => 'name',
        'metadata' => 'metadata',
        'createUnmatching' => 'createUnmatching',
        'updateMatching' => 'updateMatching',
        'selfRegUnmatching' => 'selfRegUnmatching',
        'useDeflateEncoding' => 'useDeflateEncoding',
        'supportUnsolicited' => 'supportUnsolicited',
        'bindingType' => 'bindingType',
        'logoutSupported' => 'logoutSupported',
        'userTemplate' => 'userTemplate',
        'connObjectKeyItem' => 'connObjectKeyItem',
        'items' => 'items',
        'actions' => 'actions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'entityID' => 'setEntityID',
        'name' => 'setName',
        'metadata' => 'setMetadata',
        'createUnmatching' => 'setCreateUnmatching',
        'updateMatching' => 'setUpdateMatching',
        'selfRegUnmatching' => 'setSelfRegUnmatching',
        'useDeflateEncoding' => 'setUseDeflateEncoding',
        'supportUnsolicited' => 'setSupportUnsolicited',
        'bindingType' => 'setBindingType',
        'logoutSupported' => 'setLogoutSupported',
        'userTemplate' => 'setUserTemplate',
        'connObjectKeyItem' => 'setConnObjectKeyItem',
        'items' => 'setItems',
        'actions' => 'setActions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'entityID' => 'getEntityID',
        'name' => 'getName',
        'metadata' => 'getMetadata',
        'createUnmatching' => 'getCreateUnmatching',
        'updateMatching' => 'getUpdateMatching',
        'selfRegUnmatching' => 'getSelfRegUnmatching',
        'useDeflateEncoding' => 'getUseDeflateEncoding',
        'supportUnsolicited' => 'getSupportUnsolicited',
        'bindingType' => 'getBindingType',
        'logoutSupported' => 'getLogoutSupported',
        'userTemplate' => 'getUserTemplate',
        'connObjectKeyItem' => 'getConnObjectKeyItem',
        'items' => 'getItems',
        'actions' => 'getActions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BINDING_TYPE_POST = 'POST';
    const BINDING_TYPE_REDIRECT = 'REDIRECT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBindingTypeAllowableValues()
    {
        return [
            self::BINDING_TYPE_POST,
            self::BINDING_TYPE_REDIRECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['entityID'] = isset($data['entityID']) ? $data['entityID'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['createUnmatching'] = isset($data['createUnmatching']) ? $data['createUnmatching'] : null;
        $this->container['updateMatching'] = isset($data['updateMatching']) ? $data['updateMatching'] : null;
        $this->container['selfRegUnmatching'] = isset($data['selfRegUnmatching']) ? $data['selfRegUnmatching'] : null;
        $this->container['useDeflateEncoding'] = isset($data['useDeflateEncoding']) ? $data['useDeflateEncoding'] : null;
        $this->container['supportUnsolicited'] = isset($data['supportUnsolicited']) ? $data['supportUnsolicited'] : null;
        $this->container['bindingType'] = isset($data['bindingType']) ? $data['bindingType'] : null;
        $this->container['logoutSupported'] = isset($data['logoutSupported']) ? $data['logoutSupported'] : null;
        $this->container['userTemplate'] = isset($data['userTemplate']) ? $data['userTemplate'] : null;
        $this->container['connObjectKeyItem'] = isset($data['connObjectKeyItem']) ? $data['connObjectKeyItem'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBindingTypeAllowableValues();
        if (!is_null($this->container['bindingType']) && !in_array($this->container['bindingType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bindingType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets entityID
     *
     * @return string|null
     */
    public function getEntityID()
    {
        return $this->container['entityID'];
    }

    /**
     * Sets entityID
     *
     * @param string|null $entityID entityID
     *
     * @return $this
     */
    public function setEntityID($entityID)
    {
        $this->container['entityID'] = $entityID;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets createUnmatching
     *
     * @return bool|null
     */
    public function getCreateUnmatching()
    {
        return $this->container['createUnmatching'];
    }

    /**
     * Sets createUnmatching
     *
     * @param bool|null $createUnmatching createUnmatching
     *
     * @return $this
     */
    public function setCreateUnmatching($createUnmatching)
    {
        $this->container['createUnmatching'] = $createUnmatching;

        return $this;
    }

    /**
     * Gets updateMatching
     *
     * @return bool|null
     */
    public function getUpdateMatching()
    {
        return $this->container['updateMatching'];
    }

    /**
     * Sets updateMatching
     *
     * @param bool|null $updateMatching updateMatching
     *
     * @return $this
     */
    public function setUpdateMatching($updateMatching)
    {
        $this->container['updateMatching'] = $updateMatching;

        return $this;
    }

    /**
     * Gets selfRegUnmatching
     *
     * @return bool|null
     */
    public function getSelfRegUnmatching()
    {
        return $this->container['selfRegUnmatching'];
    }

    /**
     * Sets selfRegUnmatching
     *
     * @param bool|null $selfRegUnmatching selfRegUnmatching
     *
     * @return $this
     */
    public function setSelfRegUnmatching($selfRegUnmatching)
    {
        $this->container['selfRegUnmatching'] = $selfRegUnmatching;

        return $this;
    }

    /**
     * Gets useDeflateEncoding
     *
     * @return bool|null
     */
    public function getUseDeflateEncoding()
    {
        return $this->container['useDeflateEncoding'];
    }

    /**
     * Sets useDeflateEncoding
     *
     * @param bool|null $useDeflateEncoding useDeflateEncoding
     *
     * @return $this
     */
    public function setUseDeflateEncoding($useDeflateEncoding)
    {
        $this->container['useDeflateEncoding'] = $useDeflateEncoding;

        return $this;
    }

    /**
     * Gets supportUnsolicited
     *
     * @return bool|null
     */
    public function getSupportUnsolicited()
    {
        return $this->container['supportUnsolicited'];
    }

    /**
     * Sets supportUnsolicited
     *
     * @param bool|null $supportUnsolicited supportUnsolicited
     *
     * @return $this
     */
    public function setSupportUnsolicited($supportUnsolicited)
    {
        $this->container['supportUnsolicited'] = $supportUnsolicited;

        return $this;
    }

    /**
     * Gets bindingType
     *
     * @return string|null
     */
    public function getBindingType()
    {
        return $this->container['bindingType'];
    }

    /**
     * Sets bindingType
     *
     * @param string|null $bindingType bindingType
     *
     * @return $this
     */
    public function setBindingType($bindingType)
    {
        $allowedValues = $this->getBindingTypeAllowableValues();
        if (!is_null($bindingType) && !in_array($bindingType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bindingType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bindingType'] = $bindingType;

        return $this;
    }

    /**
     * Gets logoutSupported
     *
     * @return bool|null
     */
    public function getLogoutSupported()
    {
        return $this->container['logoutSupported'];
    }

    /**
     * Sets logoutSupported
     *
     * @param bool|null $logoutSupported logoutSupported
     *
     * @return $this
     */
    public function setLogoutSupported($logoutSupported)
    {
        $this->container['logoutSupported'] = $logoutSupported;

        return $this;
    }

    /**
     * Gets userTemplate
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\UserTO|null
     */
    public function getUserTemplate()
    {
        return $this->container['userTemplate'];
    }

    /**
     * Sets userTemplate
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\UserTO|null $userTemplate userTemplate
     *
     * @return $this
     */
    public function setUserTemplate($userTemplate)
    {
        $this->container['userTemplate'] = $userTemplate;

        return $this;
    }

    /**
     * Gets connObjectKeyItem
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\ItemTO|null
     */
    public function getConnObjectKeyItem()
    {
        return $this->container['connObjectKeyItem'];
    }

    /**
     * Sets connObjectKeyItem
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\ItemTO|null $connObjectKeyItem connObjectKeyItem
     *
     * @return $this
     */
    public function setConnObjectKeyItem($connObjectKeyItem)
    {
        $this->container['connObjectKeyItem'] = $connObjectKeyItem;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\ItemTO[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\ItemTO[]|null $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return string[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param string[]|null $actions actions
     *
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


