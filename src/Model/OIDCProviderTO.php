<?php
/**
 * OIDCProviderTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * OIDCProviderTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OIDCProviderTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OIDCProviderTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'name' => 'string',
        'clientID' => 'string',
        'clientSecret' => 'string',
        'authorizationEndpoint' => 'string',
        'tokenEndpoint' => 'string',
        'jwksUri' => 'string',
        'issuer' => 'string',
        'userinfoEndpoint' => 'string',
        'endSessionEndpoint' => 'string',
        'hasDiscovery' => 'bool',
        'userTemplate' => '\SyncopePhpClient\Model\UserTO',
        'createUnmatching' => 'bool',
        'updateMatching' => 'bool',
        'selfRegUnmatching' => 'bool',
        'connObjectKeyItem' => '\SyncopePhpClient\Model\ItemTO',
        'items' => '\SyncopePhpClient\Model\ItemTO[]',
        'actionsClassNames' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'name' => null,
        'clientID' => null,
        'clientSecret' => null,
        'authorizationEndpoint' => null,
        'tokenEndpoint' => null,
        'jwksUri' => null,
        'issuer' => null,
        'userinfoEndpoint' => null,
        'endSessionEndpoint' => null,
        'hasDiscovery' => null,
        'userTemplate' => null,
        'createUnmatching' => null,
        'updateMatching' => null,
        'selfRegUnmatching' => null,
        'connObjectKeyItem' => null,
        'items' => null,
        'actionsClassNames' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'name' => 'name',
        'clientID' => 'clientID',
        'clientSecret' => 'clientSecret',
        'authorizationEndpoint' => 'authorizationEndpoint',
        'tokenEndpoint' => 'tokenEndpoint',
        'jwksUri' => 'jwksUri',
        'issuer' => 'issuer',
        'userinfoEndpoint' => 'userinfoEndpoint',
        'endSessionEndpoint' => 'endSessionEndpoint',
        'hasDiscovery' => 'hasDiscovery',
        'userTemplate' => 'userTemplate',
        'createUnmatching' => 'createUnmatching',
        'updateMatching' => 'updateMatching',
        'selfRegUnmatching' => 'selfRegUnmatching',
        'connObjectKeyItem' => 'connObjectKeyItem',
        'items' => 'items',
        'actionsClassNames' => 'actionsClassNames'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'name' => 'setName',
        'clientID' => 'setClientID',
        'clientSecret' => 'setClientSecret',
        'authorizationEndpoint' => 'setAuthorizationEndpoint',
        'tokenEndpoint' => 'setTokenEndpoint',
        'jwksUri' => 'setJwksUri',
        'issuer' => 'setIssuer',
        'userinfoEndpoint' => 'setUserinfoEndpoint',
        'endSessionEndpoint' => 'setEndSessionEndpoint',
        'hasDiscovery' => 'setHasDiscovery',
        'userTemplate' => 'setUserTemplate',
        'createUnmatching' => 'setCreateUnmatching',
        'updateMatching' => 'setUpdateMatching',
        'selfRegUnmatching' => 'setSelfRegUnmatching',
        'connObjectKeyItem' => 'setConnObjectKeyItem',
        'items' => 'setItems',
        'actionsClassNames' => 'setActionsClassNames'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'name' => 'getName',
        'clientID' => 'getClientID',
        'clientSecret' => 'getClientSecret',
        'authorizationEndpoint' => 'getAuthorizationEndpoint',
        'tokenEndpoint' => 'getTokenEndpoint',
        'jwksUri' => 'getJwksUri',
        'issuer' => 'getIssuer',
        'userinfoEndpoint' => 'getUserinfoEndpoint',
        'endSessionEndpoint' => 'getEndSessionEndpoint',
        'hasDiscovery' => 'getHasDiscovery',
        'userTemplate' => 'getUserTemplate',
        'createUnmatching' => 'getCreateUnmatching',
        'updateMatching' => 'getUpdateMatching',
        'selfRegUnmatching' => 'getSelfRegUnmatching',
        'connObjectKeyItem' => 'getConnObjectKeyItem',
        'items' => 'getItems',
        'actionsClassNames' => 'getActionsClassNames'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['clientID'] = isset($data['clientID']) ? $data['clientID'] : null;
        $this->container['clientSecret'] = isset($data['clientSecret']) ? $data['clientSecret'] : null;
        $this->container['authorizationEndpoint'] = isset($data['authorizationEndpoint']) ? $data['authorizationEndpoint'] : null;
        $this->container['tokenEndpoint'] = isset($data['tokenEndpoint']) ? $data['tokenEndpoint'] : null;
        $this->container['jwksUri'] = isset($data['jwksUri']) ? $data['jwksUri'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['userinfoEndpoint'] = isset($data['userinfoEndpoint']) ? $data['userinfoEndpoint'] : null;
        $this->container['endSessionEndpoint'] = isset($data['endSessionEndpoint']) ? $data['endSessionEndpoint'] : null;
        $this->container['hasDiscovery'] = isset($data['hasDiscovery']) ? $data['hasDiscovery'] : null;
        $this->container['userTemplate'] = isset($data['userTemplate']) ? $data['userTemplate'] : null;
        $this->container['createUnmatching'] = isset($data['createUnmatching']) ? $data['createUnmatching'] : null;
        $this->container['updateMatching'] = isset($data['updateMatching']) ? $data['updateMatching'] : null;
        $this->container['selfRegUnmatching'] = isset($data['selfRegUnmatching']) ? $data['selfRegUnmatching'] : null;
        $this->container['connObjectKeyItem'] = isset($data['connObjectKeyItem']) ? $data['connObjectKeyItem'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['actionsClassNames'] = isset($data['actionsClassNames']) ? $data['actionsClassNames'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets clientID
     *
     * @return string|null
     */
    public function getClientID()
    {
        return $this->container['clientID'];
    }

    /**
     * Sets clientID
     *
     * @param string|null $clientID clientID
     *
     * @return $this
     */
    public function setClientID($clientID)
    {
        $this->container['clientID'] = $clientID;

        return $this;
    }

    /**
     * Gets clientSecret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['clientSecret'];
    }

    /**
     * Sets clientSecret
     *
     * @param string|null $clientSecret clientSecret
     *
     * @return $this
     */
    public function setClientSecret($clientSecret)
    {
        $this->container['clientSecret'] = $clientSecret;

        return $this;
    }

    /**
     * Gets authorizationEndpoint
     *
     * @return string|null
     */
    public function getAuthorizationEndpoint()
    {
        return $this->container['authorizationEndpoint'];
    }

    /**
     * Sets authorizationEndpoint
     *
     * @param string|null $authorizationEndpoint authorizationEndpoint
     *
     * @return $this
     */
    public function setAuthorizationEndpoint($authorizationEndpoint)
    {
        $this->container['authorizationEndpoint'] = $authorizationEndpoint;

        return $this;
    }

    /**
     * Gets tokenEndpoint
     *
     * @return string|null
     */
    public function getTokenEndpoint()
    {
        return $this->container['tokenEndpoint'];
    }

    /**
     * Sets tokenEndpoint
     *
     * @param string|null $tokenEndpoint tokenEndpoint
     *
     * @return $this
     */
    public function setTokenEndpoint($tokenEndpoint)
    {
        $this->container['tokenEndpoint'] = $tokenEndpoint;

        return $this;
    }

    /**
     * Gets jwksUri
     *
     * @return string|null
     */
    public function getJwksUri()
    {
        return $this->container['jwksUri'];
    }

    /**
     * Sets jwksUri
     *
     * @param string|null $jwksUri jwksUri
     *
     * @return $this
     */
    public function setJwksUri($jwksUri)
    {
        $this->container['jwksUri'] = $jwksUri;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string|null
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string|null $issuer issuer
     *
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets userinfoEndpoint
     *
     * @return string|null
     */
    public function getUserinfoEndpoint()
    {
        return $this->container['userinfoEndpoint'];
    }

    /**
     * Sets userinfoEndpoint
     *
     * @param string|null $userinfoEndpoint userinfoEndpoint
     *
     * @return $this
     */
    public function setUserinfoEndpoint($userinfoEndpoint)
    {
        $this->container['userinfoEndpoint'] = $userinfoEndpoint;

        return $this;
    }

    /**
     * Gets endSessionEndpoint
     *
     * @return string|null
     */
    public function getEndSessionEndpoint()
    {
        return $this->container['endSessionEndpoint'];
    }

    /**
     * Sets endSessionEndpoint
     *
     * @param string|null $endSessionEndpoint endSessionEndpoint
     *
     * @return $this
     */
    public function setEndSessionEndpoint($endSessionEndpoint)
    {
        $this->container['endSessionEndpoint'] = $endSessionEndpoint;

        return $this;
    }

    /**
     * Gets hasDiscovery
     *
     * @return bool|null
     */
    public function getHasDiscovery()
    {
        return $this->container['hasDiscovery'];
    }

    /**
     * Sets hasDiscovery
     *
     * @param bool|null $hasDiscovery hasDiscovery
     *
     * @return $this
     */
    public function setHasDiscovery($hasDiscovery)
    {
        $this->container['hasDiscovery'] = $hasDiscovery;

        return $this;
    }

    /**
     * Gets userTemplate
     *
     * @return \SyncopePhpClient\Model\UserTO|null
     */
    public function getUserTemplate()
    {
        return $this->container['userTemplate'];
    }

    /**
     * Sets userTemplate
     *
     * @param \SyncopePhpClient\Model\UserTO|null $userTemplate userTemplate
     *
     * @return $this
     */
    public function setUserTemplate($userTemplate)
    {
        $this->container['userTemplate'] = $userTemplate;

        return $this;
    }

    /**
     * Gets createUnmatching
     *
     * @return bool|null
     */
    public function getCreateUnmatching()
    {
        return $this->container['createUnmatching'];
    }

    /**
     * Sets createUnmatching
     *
     * @param bool|null $createUnmatching createUnmatching
     *
     * @return $this
     */
    public function setCreateUnmatching($createUnmatching)
    {
        $this->container['createUnmatching'] = $createUnmatching;

        return $this;
    }

    /**
     * Gets updateMatching
     *
     * @return bool|null
     */
    public function getUpdateMatching()
    {
        return $this->container['updateMatching'];
    }

    /**
     * Sets updateMatching
     *
     * @param bool|null $updateMatching updateMatching
     *
     * @return $this
     */
    public function setUpdateMatching($updateMatching)
    {
        $this->container['updateMatching'] = $updateMatching;

        return $this;
    }

    /**
     * Gets selfRegUnmatching
     *
     * @return bool|null
     */
    public function getSelfRegUnmatching()
    {
        return $this->container['selfRegUnmatching'];
    }

    /**
     * Sets selfRegUnmatching
     *
     * @param bool|null $selfRegUnmatching selfRegUnmatching
     *
     * @return $this
     */
    public function setSelfRegUnmatching($selfRegUnmatching)
    {
        $this->container['selfRegUnmatching'] = $selfRegUnmatching;

        return $this;
    }

    /**
     * Gets connObjectKeyItem
     *
     * @return \SyncopePhpClient\Model\ItemTO|null
     */
    public function getConnObjectKeyItem()
    {
        return $this->container['connObjectKeyItem'];
    }

    /**
     * Sets connObjectKeyItem
     *
     * @param \SyncopePhpClient\Model\ItemTO|null $connObjectKeyItem connObjectKeyItem
     *
     * @return $this
     */
    public function setConnObjectKeyItem($connObjectKeyItem)
    {
        $this->container['connObjectKeyItem'] = $connObjectKeyItem;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \SyncopePhpClient\Model\ItemTO[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \SyncopePhpClient\Model\ItemTO[]|null $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets actionsClassNames
     *
     * @return string[]|null
     */
    public function getActionsClassNames()
    {
        return $this->container['actionsClassNames'];
    }

    /**
     * Sets actionsClassNames
     *
     * @param string[]|null $actionsClassNames actionsClassNames
     *
     * @return $this
     */
    public function setActionsClassNames($actionsClassNames)
    {
        $this->container['actionsClassNames'] = $actionsClassNames;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


