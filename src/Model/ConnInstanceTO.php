<?php
/**
 * ConnInstanceTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenEuropa\SyncopePhpClient\Model;

use \ArrayAccess;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * ConnInstanceTO Class Doc Comment
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnInstanceTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConnInstanceTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'adminRealm' => 'string',
        'location' => 'string',
        'connectorName' => 'string',
        'bundleName' => 'string',
        'version' => 'string',
        'displayName' => 'string',
        'connRequestTimeout' => 'int',
        'poolConf' => '\OpenEuropa\SyncopePhpClient\Model\ConnPoolConfTO',
        'conf' => '\OpenEuropa\SyncopePhpClient\Model\ConnConfProperty[]',
        'capabilities' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'adminRealm' => null,
        'location' => null,
        'connectorName' => null,
        'bundleName' => null,
        'version' => null,
        'displayName' => null,
        'connRequestTimeout' => 'int32',
        'poolConf' => null,
        'conf' => null,
        'capabilities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'adminRealm' => 'adminRealm',
        'location' => 'location',
        'connectorName' => 'connectorName',
        'bundleName' => 'bundleName',
        'version' => 'version',
        'displayName' => 'displayName',
        'connRequestTimeout' => 'connRequestTimeout',
        'poolConf' => 'poolConf',
        'conf' => 'conf',
        'capabilities' => 'capabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'adminRealm' => 'setAdminRealm',
        'location' => 'setLocation',
        'connectorName' => 'setConnectorName',
        'bundleName' => 'setBundleName',
        'version' => 'setVersion',
        'displayName' => 'setDisplayName',
        'connRequestTimeout' => 'setConnRequestTimeout',
        'poolConf' => 'setPoolConf',
        'conf' => 'setConf',
        'capabilities' => 'setCapabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'adminRealm' => 'getAdminRealm',
        'location' => 'getLocation',
        'connectorName' => 'getConnectorName',
        'bundleName' => 'getBundleName',
        'version' => 'getVersion',
        'displayName' => 'getDisplayName',
        'connRequestTimeout' => 'getConnRequestTimeout',
        'poolConf' => 'getPoolConf',
        'conf' => 'getConf',
        'capabilities' => 'getCapabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CAPABILITIES_AUTHENTICATE = 'AUTHENTICATE';
    const CAPABILITIES_CREATE = 'CREATE';
    const CAPABILITIES_UPDATE = 'UPDATE';
    const CAPABILITIES_DELETE = 'DELETE';
    const CAPABILITIES_SEARCH = 'SEARCH';
    const CAPABILITIES_SYNC = 'SYNC';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilitiesAllowableValues()
    {
        return [
            self::CAPABILITIES_AUTHENTICATE,
            self::CAPABILITIES_CREATE,
            self::CAPABILITIES_UPDATE,
            self::CAPABILITIES_DELETE,
            self::CAPABILITIES_SEARCH,
            self::CAPABILITIES_SYNC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['adminRealm'] = isset($data['adminRealm']) ? $data['adminRealm'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['connectorName'] = isset($data['connectorName']) ? $data['connectorName'] : null;
        $this->container['bundleName'] = isset($data['bundleName']) ? $data['bundleName'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['connRequestTimeout'] = isset($data['connRequestTimeout']) ? $data['connRequestTimeout'] : null;
        $this->container['poolConf'] = isset($data['poolConf']) ? $data['poolConf'] : null;
        $this->container['conf'] = isset($data['conf']) ? $data['conf'] : null;
        $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets adminRealm
     *
     * @return string|null
     */
    public function getAdminRealm()
    {
        return $this->container['adminRealm'];
    }

    /**
     * Sets adminRealm
     *
     * @param string|null $adminRealm adminRealm
     *
     * @return $this
     */
    public function setAdminRealm($adminRealm)
    {
        $this->container['adminRealm'] = $adminRealm;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets connectorName
     *
     * @return string|null
     */
    public function getConnectorName()
    {
        return $this->container['connectorName'];
    }

    /**
     * Sets connectorName
     *
     * @param string|null $connectorName connectorName
     *
     * @return $this
     */
    public function setConnectorName($connectorName)
    {
        $this->container['connectorName'] = $connectorName;

        return $this;
    }

    /**
     * Gets bundleName
     *
     * @return string|null
     */
    public function getBundleName()
    {
        return $this->container['bundleName'];
    }

    /**
     * Sets bundleName
     *
     * @param string|null $bundleName bundleName
     *
     * @return $this
     */
    public function setBundleName($bundleName)
    {
        $this->container['bundleName'] = $bundleName;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets connRequestTimeout
     *
     * @return int|null
     */
    public function getConnRequestTimeout()
    {
        return $this->container['connRequestTimeout'];
    }

    /**
     * Sets connRequestTimeout
     *
     * @param int|null $connRequestTimeout connRequestTimeout
     *
     * @return $this
     */
    public function setConnRequestTimeout($connRequestTimeout)
    {
        $this->container['connRequestTimeout'] = $connRequestTimeout;

        return $this;
    }

    /**
     * Gets poolConf
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\ConnPoolConfTO|null
     */
    public function getPoolConf()
    {
        return $this->container['poolConf'];
    }

    /**
     * Sets poolConf
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\ConnPoolConfTO|null $poolConf poolConf
     *
     * @return $this
     */
    public function setPoolConf($poolConf)
    {
        $this->container['poolConf'] = $poolConf;

        return $this;
    }

    /**
     * Gets conf
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\ConnConfProperty[]|null
     */
    public function getConf()
    {
        return $this->container['conf'];
    }

    /**
     * Sets conf
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\ConnConfProperty[]|null $conf conf
     *
     * @return $this
     */
    public function setConf($conf)
    {
        $this->container['conf'] = $conf;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return string[]|null
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param string[]|null $capabilities capabilities
     *
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $allowedValues = $this->getCapabilitiesAllowableValues();
        if (!is_null($capabilities) && array_diff($capabilities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'capabilities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


