<?php
/**
 * ResourceTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * ResourceTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResourceTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResourceTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'connector' => 'string',
        'connectorDisplayName' => 'string',
        'orgUnit' => '\SyncopePhpClient\Model\OrgUnitTO',
        'propagationPriority' => 'int',
        'randomPwdIfNotProvided' => 'bool',
        'enforceMandatoryCondition' => 'bool',
        'createTraceLevel' => 'string',
        'updateTraceLevel' => 'string',
        'deleteTraceLevel' => 'string',
        'provisioningTraceLevel' => 'string',
        'passwordPolicy' => 'string',
        'accountPolicy' => 'string',
        'pullPolicy' => 'string',
        'pushPolicy' => 'string',
        'overrideCapabilities' => 'bool',
        'provisions' => '\SyncopePhpClient\Model\ProvisionTO[]',
        'confOverride' => '\SyncopePhpClient\Model\ConnConfProperty[]',
        'capabilitiesOverride' => 'string[]',
        'propagationActions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'connector' => null,
        'connectorDisplayName' => null,
        'orgUnit' => null,
        'propagationPriority' => 'int32',
        'randomPwdIfNotProvided' => null,
        'enforceMandatoryCondition' => null,
        'createTraceLevel' => null,
        'updateTraceLevel' => null,
        'deleteTraceLevel' => null,
        'provisioningTraceLevel' => null,
        'passwordPolicy' => null,
        'accountPolicy' => null,
        'pullPolicy' => null,
        'pushPolicy' => null,
        'overrideCapabilities' => null,
        'provisions' => null,
        'confOverride' => null,
        'capabilitiesOverride' => null,
        'propagationActions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'connector' => 'connector',
        'connectorDisplayName' => 'connectorDisplayName',
        'orgUnit' => 'orgUnit',
        'propagationPriority' => 'propagationPriority',
        'randomPwdIfNotProvided' => 'randomPwdIfNotProvided',
        'enforceMandatoryCondition' => 'enforceMandatoryCondition',
        'createTraceLevel' => 'createTraceLevel',
        'updateTraceLevel' => 'updateTraceLevel',
        'deleteTraceLevel' => 'deleteTraceLevel',
        'provisioningTraceLevel' => 'provisioningTraceLevel',
        'passwordPolicy' => 'passwordPolicy',
        'accountPolicy' => 'accountPolicy',
        'pullPolicy' => 'pullPolicy',
        'pushPolicy' => 'pushPolicy',
        'overrideCapabilities' => 'overrideCapabilities',
        'provisions' => 'provisions',
        'confOverride' => 'confOverride',
        'capabilitiesOverride' => 'capabilitiesOverride',
        'propagationActions' => 'propagationActions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'connector' => 'setConnector',
        'connectorDisplayName' => 'setConnectorDisplayName',
        'orgUnit' => 'setOrgUnit',
        'propagationPriority' => 'setPropagationPriority',
        'randomPwdIfNotProvided' => 'setRandomPwdIfNotProvided',
        'enforceMandatoryCondition' => 'setEnforceMandatoryCondition',
        'createTraceLevel' => 'setCreateTraceLevel',
        'updateTraceLevel' => 'setUpdateTraceLevel',
        'deleteTraceLevel' => 'setDeleteTraceLevel',
        'provisioningTraceLevel' => 'setProvisioningTraceLevel',
        'passwordPolicy' => 'setPasswordPolicy',
        'accountPolicy' => 'setAccountPolicy',
        'pullPolicy' => 'setPullPolicy',
        'pushPolicy' => 'setPushPolicy',
        'overrideCapabilities' => 'setOverrideCapabilities',
        'provisions' => 'setProvisions',
        'confOverride' => 'setConfOverride',
        'capabilitiesOverride' => 'setCapabilitiesOverride',
        'propagationActions' => 'setPropagationActions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'connector' => 'getConnector',
        'connectorDisplayName' => 'getConnectorDisplayName',
        'orgUnit' => 'getOrgUnit',
        'propagationPriority' => 'getPropagationPriority',
        'randomPwdIfNotProvided' => 'getRandomPwdIfNotProvided',
        'enforceMandatoryCondition' => 'getEnforceMandatoryCondition',
        'createTraceLevel' => 'getCreateTraceLevel',
        'updateTraceLevel' => 'getUpdateTraceLevel',
        'deleteTraceLevel' => 'getDeleteTraceLevel',
        'provisioningTraceLevel' => 'getProvisioningTraceLevel',
        'passwordPolicy' => 'getPasswordPolicy',
        'accountPolicy' => 'getAccountPolicy',
        'pullPolicy' => 'getPullPolicy',
        'pushPolicy' => 'getPushPolicy',
        'overrideCapabilities' => 'getOverrideCapabilities',
        'provisions' => 'getProvisions',
        'confOverride' => 'getConfOverride',
        'capabilitiesOverride' => 'getCapabilitiesOverride',
        'propagationActions' => 'getPropagationActions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CREATE_TRACE_LEVEL_NONE = 'NONE';
    const CREATE_TRACE_LEVEL_FAILURES = 'FAILURES';
    const CREATE_TRACE_LEVEL_SUMMARY = 'SUMMARY';
    const CREATE_TRACE_LEVEL_ALL = 'ALL';
    const UPDATE_TRACE_LEVEL_NONE = 'NONE';
    const UPDATE_TRACE_LEVEL_FAILURES = 'FAILURES';
    const UPDATE_TRACE_LEVEL_SUMMARY = 'SUMMARY';
    const UPDATE_TRACE_LEVEL_ALL = 'ALL';
    const DELETE_TRACE_LEVEL_NONE = 'NONE';
    const DELETE_TRACE_LEVEL_FAILURES = 'FAILURES';
    const DELETE_TRACE_LEVEL_SUMMARY = 'SUMMARY';
    const DELETE_TRACE_LEVEL_ALL = 'ALL';
    const PROVISIONING_TRACE_LEVEL_NONE = 'NONE';
    const PROVISIONING_TRACE_LEVEL_FAILURES = 'FAILURES';
    const PROVISIONING_TRACE_LEVEL_SUMMARY = 'SUMMARY';
    const PROVISIONING_TRACE_LEVEL_ALL = 'ALL';
    const CAPABILITIES_OVERRIDE_AUTHENTICATE = 'AUTHENTICATE';
    const CAPABILITIES_OVERRIDE_CREATE = 'CREATE';
    const CAPABILITIES_OVERRIDE_UPDATE = 'UPDATE';
    const CAPABILITIES_OVERRIDE_DELETE = 'DELETE';
    const CAPABILITIES_OVERRIDE_SEARCH = 'SEARCH';
    const CAPABILITIES_OVERRIDE_SYNC = 'SYNC';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreateTraceLevelAllowableValues()
    {
        return [
            self::CREATE_TRACE_LEVEL_NONE,
            self::CREATE_TRACE_LEVEL_FAILURES,
            self::CREATE_TRACE_LEVEL_SUMMARY,
            self::CREATE_TRACE_LEVEL_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateTraceLevelAllowableValues()
    {
        return [
            self::UPDATE_TRACE_LEVEL_NONE,
            self::UPDATE_TRACE_LEVEL_FAILURES,
            self::UPDATE_TRACE_LEVEL_SUMMARY,
            self::UPDATE_TRACE_LEVEL_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeleteTraceLevelAllowableValues()
    {
        return [
            self::DELETE_TRACE_LEVEL_NONE,
            self::DELETE_TRACE_LEVEL_FAILURES,
            self::DELETE_TRACE_LEVEL_SUMMARY,
            self::DELETE_TRACE_LEVEL_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProvisioningTraceLevelAllowableValues()
    {
        return [
            self::PROVISIONING_TRACE_LEVEL_NONE,
            self::PROVISIONING_TRACE_LEVEL_FAILURES,
            self::PROVISIONING_TRACE_LEVEL_SUMMARY,
            self::PROVISIONING_TRACE_LEVEL_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilitiesOverrideAllowableValues()
    {
        return [
            self::CAPABILITIES_OVERRIDE_AUTHENTICATE,
            self::CAPABILITIES_OVERRIDE_CREATE,
            self::CAPABILITIES_OVERRIDE_UPDATE,
            self::CAPABILITIES_OVERRIDE_DELETE,
            self::CAPABILITIES_OVERRIDE_SEARCH,
            self::CAPABILITIES_OVERRIDE_SYNC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['connector'] = isset($data['connector']) ? $data['connector'] : null;
        $this->container['connectorDisplayName'] = isset($data['connectorDisplayName']) ? $data['connectorDisplayName'] : null;
        $this->container['orgUnit'] = isset($data['orgUnit']) ? $data['orgUnit'] : null;
        $this->container['propagationPriority'] = isset($data['propagationPriority']) ? $data['propagationPriority'] : null;
        $this->container['randomPwdIfNotProvided'] = isset($data['randomPwdIfNotProvided']) ? $data['randomPwdIfNotProvided'] : null;
        $this->container['enforceMandatoryCondition'] = isset($data['enforceMandatoryCondition']) ? $data['enforceMandatoryCondition'] : null;
        $this->container['createTraceLevel'] = isset($data['createTraceLevel']) ? $data['createTraceLevel'] : null;
        $this->container['updateTraceLevel'] = isset($data['updateTraceLevel']) ? $data['updateTraceLevel'] : null;
        $this->container['deleteTraceLevel'] = isset($data['deleteTraceLevel']) ? $data['deleteTraceLevel'] : null;
        $this->container['provisioningTraceLevel'] = isset($data['provisioningTraceLevel']) ? $data['provisioningTraceLevel'] : null;
        $this->container['passwordPolicy'] = isset($data['passwordPolicy']) ? $data['passwordPolicy'] : null;
        $this->container['accountPolicy'] = isset($data['accountPolicy']) ? $data['accountPolicy'] : null;
        $this->container['pullPolicy'] = isset($data['pullPolicy']) ? $data['pullPolicy'] : null;
        $this->container['pushPolicy'] = isset($data['pushPolicy']) ? $data['pushPolicy'] : null;
        $this->container['overrideCapabilities'] = isset($data['overrideCapabilities']) ? $data['overrideCapabilities'] : null;
        $this->container['provisions'] = isset($data['provisions']) ? $data['provisions'] : null;
        $this->container['confOverride'] = isset($data['confOverride']) ? $data['confOverride'] : null;
        $this->container['capabilitiesOverride'] = isset($data['capabilitiesOverride']) ? $data['capabilitiesOverride'] : null;
        $this->container['propagationActions'] = isset($data['propagationActions']) ? $data['propagationActions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCreateTraceLevelAllowableValues();
        if (!is_null($this->container['createTraceLevel']) && !in_array($this->container['createTraceLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'createTraceLevel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateTraceLevelAllowableValues();
        if (!is_null($this->container['updateTraceLevel']) && !in_array($this->container['updateTraceLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'updateTraceLevel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeleteTraceLevelAllowableValues();
        if (!is_null($this->container['deleteTraceLevel']) && !in_array($this->container['deleteTraceLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deleteTraceLevel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProvisioningTraceLevelAllowableValues();
        if (!is_null($this->container['provisioningTraceLevel']) && !in_array($this->container['provisioningTraceLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'provisioningTraceLevel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets connector
     *
     * @return string|null
     */
    public function getConnector()
    {
        return $this->container['connector'];
    }

    /**
     * Sets connector
     *
     * @param string|null $connector connector
     *
     * @return $this
     */
    public function setConnector($connector)
    {
        $this->container['connector'] = $connector;

        return $this;
    }

    /**
     * Gets connectorDisplayName
     *
     * @return string|null
     */
    public function getConnectorDisplayName()
    {
        return $this->container['connectorDisplayName'];
    }

    /**
     * Sets connectorDisplayName
     *
     * @param string|null $connectorDisplayName connectorDisplayName
     *
     * @return $this
     */
    public function setConnectorDisplayName($connectorDisplayName)
    {
        $this->container['connectorDisplayName'] = $connectorDisplayName;

        return $this;
    }

    /**
     * Gets orgUnit
     *
     * @return \SyncopePhpClient\Model\OrgUnitTO|null
     */
    public function getOrgUnit()
    {
        return $this->container['orgUnit'];
    }

    /**
     * Sets orgUnit
     *
     * @param \SyncopePhpClient\Model\OrgUnitTO|null $orgUnit orgUnit
     *
     * @return $this
     */
    public function setOrgUnit($orgUnit)
    {
        $this->container['orgUnit'] = $orgUnit;

        return $this;
    }

    /**
     * Gets propagationPriority
     *
     * @return int|null
     */
    public function getPropagationPriority()
    {
        return $this->container['propagationPriority'];
    }

    /**
     * Sets propagationPriority
     *
     * @param int|null $propagationPriority propagationPriority
     *
     * @return $this
     */
    public function setPropagationPriority($propagationPriority)
    {
        $this->container['propagationPriority'] = $propagationPriority;

        return $this;
    }

    /**
     * Gets randomPwdIfNotProvided
     *
     * @return bool|null
     */
    public function getRandomPwdIfNotProvided()
    {
        return $this->container['randomPwdIfNotProvided'];
    }

    /**
     * Sets randomPwdIfNotProvided
     *
     * @param bool|null $randomPwdIfNotProvided randomPwdIfNotProvided
     *
     * @return $this
     */
    public function setRandomPwdIfNotProvided($randomPwdIfNotProvided)
    {
        $this->container['randomPwdIfNotProvided'] = $randomPwdIfNotProvided;

        return $this;
    }

    /**
     * Gets enforceMandatoryCondition
     *
     * @return bool|null
     */
    public function getEnforceMandatoryCondition()
    {
        return $this->container['enforceMandatoryCondition'];
    }

    /**
     * Sets enforceMandatoryCondition
     *
     * @param bool|null $enforceMandatoryCondition enforceMandatoryCondition
     *
     * @return $this
     */
    public function setEnforceMandatoryCondition($enforceMandatoryCondition)
    {
        $this->container['enforceMandatoryCondition'] = $enforceMandatoryCondition;

        return $this;
    }

    /**
     * Gets createTraceLevel
     *
     * @return string|null
     */
    public function getCreateTraceLevel()
    {
        return $this->container['createTraceLevel'];
    }

    /**
     * Sets createTraceLevel
     *
     * @param string|null $createTraceLevel createTraceLevel
     *
     * @return $this
     */
    public function setCreateTraceLevel($createTraceLevel)
    {
        $allowedValues = $this->getCreateTraceLevelAllowableValues();
        if (!is_null($createTraceLevel) && !in_array($createTraceLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'createTraceLevel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['createTraceLevel'] = $createTraceLevel;

        return $this;
    }

    /**
     * Gets updateTraceLevel
     *
     * @return string|null
     */
    public function getUpdateTraceLevel()
    {
        return $this->container['updateTraceLevel'];
    }

    /**
     * Sets updateTraceLevel
     *
     * @param string|null $updateTraceLevel updateTraceLevel
     *
     * @return $this
     */
    public function setUpdateTraceLevel($updateTraceLevel)
    {
        $allowedValues = $this->getUpdateTraceLevelAllowableValues();
        if (!is_null($updateTraceLevel) && !in_array($updateTraceLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'updateTraceLevel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['updateTraceLevel'] = $updateTraceLevel;

        return $this;
    }

    /**
     * Gets deleteTraceLevel
     *
     * @return string|null
     */
    public function getDeleteTraceLevel()
    {
        return $this->container['deleteTraceLevel'];
    }

    /**
     * Sets deleteTraceLevel
     *
     * @param string|null $deleteTraceLevel deleteTraceLevel
     *
     * @return $this
     */
    public function setDeleteTraceLevel($deleteTraceLevel)
    {
        $allowedValues = $this->getDeleteTraceLevelAllowableValues();
        if (!is_null($deleteTraceLevel) && !in_array($deleteTraceLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deleteTraceLevel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deleteTraceLevel'] = $deleteTraceLevel;

        return $this;
    }

    /**
     * Gets provisioningTraceLevel
     *
     * @return string|null
     */
    public function getProvisioningTraceLevel()
    {
        return $this->container['provisioningTraceLevel'];
    }

    /**
     * Sets provisioningTraceLevel
     *
     * @param string|null $provisioningTraceLevel provisioningTraceLevel
     *
     * @return $this
     */
    public function setProvisioningTraceLevel($provisioningTraceLevel)
    {
        $allowedValues = $this->getProvisioningTraceLevelAllowableValues();
        if (!is_null($provisioningTraceLevel) && !in_array($provisioningTraceLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'provisioningTraceLevel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provisioningTraceLevel'] = $provisioningTraceLevel;

        return $this;
    }

    /**
     * Gets passwordPolicy
     *
     * @return string|null
     */
    public function getPasswordPolicy()
    {
        return $this->container['passwordPolicy'];
    }

    /**
     * Sets passwordPolicy
     *
     * @param string|null $passwordPolicy passwordPolicy
     *
     * @return $this
     */
    public function setPasswordPolicy($passwordPolicy)
    {
        $this->container['passwordPolicy'] = $passwordPolicy;

        return $this;
    }

    /**
     * Gets accountPolicy
     *
     * @return string|null
     */
    public function getAccountPolicy()
    {
        return $this->container['accountPolicy'];
    }

    /**
     * Sets accountPolicy
     *
     * @param string|null $accountPolicy accountPolicy
     *
     * @return $this
     */
    public function setAccountPolicy($accountPolicy)
    {
        $this->container['accountPolicy'] = $accountPolicy;

        return $this;
    }

    /**
     * Gets pullPolicy
     *
     * @return string|null
     */
    public function getPullPolicy()
    {
        return $this->container['pullPolicy'];
    }

    /**
     * Sets pullPolicy
     *
     * @param string|null $pullPolicy pullPolicy
     *
     * @return $this
     */
    public function setPullPolicy($pullPolicy)
    {
        $this->container['pullPolicy'] = $pullPolicy;

        return $this;
    }

    /**
     * Gets pushPolicy
     *
     * @return string|null
     */
    public function getPushPolicy()
    {
        return $this->container['pushPolicy'];
    }

    /**
     * Sets pushPolicy
     *
     * @param string|null $pushPolicy pushPolicy
     *
     * @return $this
     */
    public function setPushPolicy($pushPolicy)
    {
        $this->container['pushPolicy'] = $pushPolicy;

        return $this;
    }

    /**
     * Gets overrideCapabilities
     *
     * @return bool|null
     */
    public function getOverrideCapabilities()
    {
        return $this->container['overrideCapabilities'];
    }

    /**
     * Sets overrideCapabilities
     *
     * @param bool|null $overrideCapabilities overrideCapabilities
     *
     * @return $this
     */
    public function setOverrideCapabilities($overrideCapabilities)
    {
        $this->container['overrideCapabilities'] = $overrideCapabilities;

        return $this;
    }

    /**
     * Gets provisions
     *
     * @return \SyncopePhpClient\Model\ProvisionTO[]|null
     */
    public function getProvisions()
    {
        return $this->container['provisions'];
    }

    /**
     * Sets provisions
     *
     * @param \SyncopePhpClient\Model\ProvisionTO[]|null $provisions provisions
     *
     * @return $this
     */
    public function setProvisions($provisions)
    {
        $this->container['provisions'] = $provisions;

        return $this;
    }

    /**
     * Gets confOverride
     *
     * @return \SyncopePhpClient\Model\ConnConfProperty[]|null
     */
    public function getConfOverride()
    {
        return $this->container['confOverride'];
    }

    /**
     * Sets confOverride
     *
     * @param \SyncopePhpClient\Model\ConnConfProperty[]|null $confOverride confOverride
     *
     * @return $this
     */
    public function setConfOverride($confOverride)
    {
        $this->container['confOverride'] = $confOverride;

        return $this;
    }

    /**
     * Gets capabilitiesOverride
     *
     * @return string[]|null
     */
    public function getCapabilitiesOverride()
    {
        return $this->container['capabilitiesOverride'];
    }

    /**
     * Sets capabilitiesOverride
     *
     * @param string[]|null $capabilitiesOverride capabilitiesOverride
     *
     * @return $this
     */
    public function setCapabilitiesOverride($capabilitiesOverride)
    {
        $allowedValues = $this->getCapabilitiesOverrideAllowableValues();
        if (!is_null($capabilitiesOverride) && array_diff($capabilitiesOverride, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'capabilitiesOverride', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capabilitiesOverride'] = $capabilitiesOverride;

        return $this;
    }

    /**
     * Gets propagationActions
     *
     * @return string[]|null
     */
    public function getPropagationActions()
    {
        return $this->container['propagationActions'];
    }

    /**
     * Sets propagationActions
     *
     * @param string[]|null $propagationActions propagationActions
     *
     * @return $this
     */
    public function setPropagationActions($propagationActions)
    {
        $this->container['propagationActions'] = $propagationActions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


