<?php
/**
 * DomainTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenEuropa\SyncopePhpClient\Model;

use \ArrayAccess;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * DomainTO Class Doc Comment
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DomainTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomainTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'adminPwd' => 'string',
        'adminCipherAlgorithm' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'adminPwd' => null,
        'adminCipherAlgorithm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'adminPwd' => 'adminPwd',
        'adminCipherAlgorithm' => 'adminCipherAlgorithm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'adminPwd' => 'setAdminPwd',
        'adminCipherAlgorithm' => 'setAdminCipherAlgorithm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'adminPwd' => 'getAdminPwd',
        'adminCipherAlgorithm' => 'getAdminCipherAlgorithm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADMIN_CIPHER_ALGORITHM_SHA = 'SHA';
    const ADMIN_CIPHER_ALGORITHM_SHA1 = 'SHA1';
    const ADMIN_CIPHER_ALGORITHM_SHA256 = 'SHA256';
    const ADMIN_CIPHER_ALGORITHM_SHA512 = 'SHA512';
    const ADMIN_CIPHER_ALGORITHM_AES = 'AES';
    const ADMIN_CIPHER_ALGORITHM_SMD5 = 'SMD5';
    const ADMIN_CIPHER_ALGORITHM_SSHA = 'SSHA';
    const ADMIN_CIPHER_ALGORITHM_SSHA1 = 'SSHA1';
    const ADMIN_CIPHER_ALGORITHM_SSHA256 = 'SSHA256';
    const ADMIN_CIPHER_ALGORITHM_SSHA512 = 'SSHA512';
    const ADMIN_CIPHER_ALGORITHM_BCRYPT = 'BCRYPT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminCipherAlgorithmAllowableValues()
    {
        return [
            self::ADMIN_CIPHER_ALGORITHM_SHA,
            self::ADMIN_CIPHER_ALGORITHM_SHA1,
            self::ADMIN_CIPHER_ALGORITHM_SHA256,
            self::ADMIN_CIPHER_ALGORITHM_SHA512,
            self::ADMIN_CIPHER_ALGORITHM_AES,
            self::ADMIN_CIPHER_ALGORITHM_SMD5,
            self::ADMIN_CIPHER_ALGORITHM_SSHA,
            self::ADMIN_CIPHER_ALGORITHM_SSHA1,
            self::ADMIN_CIPHER_ALGORITHM_SSHA256,
            self::ADMIN_CIPHER_ALGORITHM_SSHA512,
            self::ADMIN_CIPHER_ALGORITHM_BCRYPT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['adminPwd'] = isset($data['adminPwd']) ? $data['adminPwd'] : null;
        $this->container['adminCipherAlgorithm'] = isset($data['adminCipherAlgorithm']) ? $data['adminCipherAlgorithm'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAdminCipherAlgorithmAllowableValues();
        if (!is_null($this->container['adminCipherAlgorithm']) && !in_array($this->container['adminCipherAlgorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'adminCipherAlgorithm', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets adminPwd
     *
     * @return string|null
     */
    public function getAdminPwd()
    {
        return $this->container['adminPwd'];
    }

    /**
     * Sets adminPwd
     *
     * @param string|null $adminPwd adminPwd
     *
     * @return $this
     */
    public function setAdminPwd($adminPwd)
    {
        $this->container['adminPwd'] = $adminPwd;

        return $this;
    }

    /**
     * Gets adminCipherAlgorithm
     *
     * @return string|null
     */
    public function getAdminCipherAlgorithm()
    {
        return $this->container['adminCipherAlgorithm'];
    }

    /**
     * Sets adminCipherAlgorithm
     *
     * @param string|null $adminCipherAlgorithm adminCipherAlgorithm
     *
     * @return $this
     */
    public function setAdminCipherAlgorithm($adminCipherAlgorithm)
    {
        $allowedValues = $this->getAdminCipherAlgorithmAllowableValues();
        if (!is_null($adminCipherAlgorithm) && !in_array($adminCipherAlgorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'adminCipherAlgorithm', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adminCipherAlgorithm'] = $adminCipherAlgorithm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


