<?php
/**
 * RemediationTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenEuropa\SyncopePhpClient\Model;

use \ArrayAccess;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * RemediationTO Class Doc Comment
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RemediationTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RemediationTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'anyType' => 'string',
        'operation' => 'string',
        'anyTOPayload' => '\OpenEuropa\SyncopePhpClient\Model\AnyTO',
        'anyPatchPayload' => '\OpenEuropa\SyncopePhpClient\Model\AnyPatch',
        'keyPayload' => 'string',
        'error' => 'string',
        'instant' => '\DateTime',
        'pullTask' => 'string',
        'resource' => 'string',
        'remoteName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'anyType' => null,
        'operation' => null,
        'anyTOPayload' => null,
        'anyPatchPayload' => null,
        'keyPayload' => null,
        'error' => null,
        'instant' => 'date-time',
        'pullTask' => null,
        'resource' => null,
        'remoteName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'anyType' => 'anyType',
        'operation' => 'operation',
        'anyTOPayload' => 'anyTOPayload',
        'anyPatchPayload' => 'anyPatchPayload',
        'keyPayload' => 'keyPayload',
        'error' => 'error',
        'instant' => 'instant',
        'pullTask' => 'pullTask',
        'resource' => 'resource',
        'remoteName' => 'remoteName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'anyType' => 'setAnyType',
        'operation' => 'setOperation',
        'anyTOPayload' => 'setAnyTOPayload',
        'anyPatchPayload' => 'setAnyPatchPayload',
        'keyPayload' => 'setKeyPayload',
        'error' => 'setError',
        'instant' => 'setInstant',
        'pullTask' => 'setPullTask',
        'resource' => 'setResource',
        'remoteName' => 'setRemoteName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'anyType' => 'getAnyType',
        'operation' => 'getOperation',
        'anyTOPayload' => 'getAnyTOPayload',
        'anyPatchPayload' => 'getAnyPatchPayload',
        'keyPayload' => 'getKeyPayload',
        'error' => 'getError',
        'instant' => 'getInstant',
        'pullTask' => 'getPullTask',
        'resource' => 'getResource',
        'remoteName' => 'getRemoteName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OPERATION_CREATE = 'CREATE';
    const OPERATION_UPDATE = 'UPDATE';
    const OPERATION_DELETE = 'DELETE';
    const OPERATION_NONE = 'NONE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_CREATE,
            self::OPERATION_UPDATE,
            self::OPERATION_DELETE,
            self::OPERATION_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['anyType'] = isset($data['anyType']) ? $data['anyType'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['anyTOPayload'] = isset($data['anyTOPayload']) ? $data['anyTOPayload'] : null;
        $this->container['anyPatchPayload'] = isset($data['anyPatchPayload']) ? $data['anyPatchPayload'] : null;
        $this->container['keyPayload'] = isset($data['keyPayload']) ? $data['keyPayload'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['instant'] = isset($data['instant']) ? $data['instant'] : null;
        $this->container['pullTask'] = isset($data['pullTask']) ? $data['pullTask'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['remoteName'] = isset($data['remoteName']) ? $data['remoteName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets anyType
     *
     * @return string|null
     */
    public function getAnyType()
    {
        return $this->container['anyType'];
    }

    /**
     * Sets anyType
     *
     * @param string|null $anyType anyType
     *
     * @return $this
     */
    public function setAnyType($anyType)
    {
        $this->container['anyType'] = $anyType;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string|null $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets anyTOPayload
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\AnyTO|null
     */
    public function getAnyTOPayload()
    {
        return $this->container['anyTOPayload'];
    }

    /**
     * Sets anyTOPayload
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\AnyTO|null $anyTOPayload anyTOPayload
     *
     * @return $this
     */
    public function setAnyTOPayload($anyTOPayload)
    {
        $this->container['anyTOPayload'] = $anyTOPayload;

        return $this;
    }

    /**
     * Gets anyPatchPayload
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\AnyPatch|null
     */
    public function getAnyPatchPayload()
    {
        return $this->container['anyPatchPayload'];
    }

    /**
     * Sets anyPatchPayload
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\AnyPatch|null $anyPatchPayload anyPatchPayload
     *
     * @return $this
     */
    public function setAnyPatchPayload($anyPatchPayload)
    {
        $this->container['anyPatchPayload'] = $anyPatchPayload;

        return $this;
    }

    /**
     * Gets keyPayload
     *
     * @return string|null
     */
    public function getKeyPayload()
    {
        return $this->container['keyPayload'];
    }

    /**
     * Sets keyPayload
     *
     * @param string|null $keyPayload keyPayload
     *
     * @return $this
     */
    public function setKeyPayload($keyPayload)
    {
        $this->container['keyPayload'] = $keyPayload;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets instant
     *
     * @return \DateTime|null
     */
    public function getInstant()
    {
        return $this->container['instant'];
    }

    /**
     * Sets instant
     *
     * @param \DateTime|null $instant instant
     *
     * @return $this
     */
    public function setInstant($instant)
    {
        $this->container['instant'] = $instant;

        return $this;
    }

    /**
     * Gets pullTask
     *
     * @return string|null
     */
    public function getPullTask()
    {
        return $this->container['pullTask'];
    }

    /**
     * Sets pullTask
     *
     * @param string|null $pullTask pullTask
     *
     * @return $this
     */
    public function setPullTask($pullTask)
    {
        $this->container['pullTask'] = $pullTask;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string|null
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string|null $resource resource
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets remoteName
     *
     * @return string|null
     */
    public function getRemoteName()
    {
        return $this->container['remoteName'];
    }

    /**
     * Sets remoteName
     *
     * @param string|null $remoteName remoteName
     *
     * @return $this
     */
    public function setRemoteName($remoteName)
    {
        $this->container['remoteName'] = $remoteName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


