<?php
/**
 * SAML2ReceivedResponseTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * SAML2ReceivedResponseTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SAML2ReceivedResponseTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SAML2ReceivedResponseTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'spEntityID' => 'string',
        'urlContext' => 'string',
        'samlResponse' => 'string',
        'relayState' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'spEntityID' => null,
        'urlContext' => null,
        'samlResponse' => null,
        'relayState' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spEntityID' => 'spEntityID',
        'urlContext' => 'urlContext',
        'samlResponse' => 'samlResponse',
        'relayState' => 'relayState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spEntityID' => 'setSpEntityID',
        'urlContext' => 'setUrlContext',
        'samlResponse' => 'setSamlResponse',
        'relayState' => 'setRelayState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spEntityID' => 'getSpEntityID',
        'urlContext' => 'getUrlContext',
        'samlResponse' => 'getSamlResponse',
        'relayState' => 'getRelayState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['spEntityID'] = isset($data['spEntityID']) ? $data['spEntityID'] : null;
        $this->container['urlContext'] = isset($data['urlContext']) ? $data['urlContext'] : null;
        $this->container['samlResponse'] = isset($data['samlResponse']) ? $data['samlResponse'] : null;
        $this->container['relayState'] = isset($data['relayState']) ? $data['relayState'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spEntityID
     *
     * @return string|null
     */
    public function getSpEntityID()
    {
        return $this->container['spEntityID'];
    }

    /**
     * Sets spEntityID
     *
     * @param string|null $spEntityID spEntityID
     *
     * @return $this
     */
    public function setSpEntityID($spEntityID)
    {
        $this->container['spEntityID'] = $spEntityID;

        return $this;
    }

    /**
     * Gets urlContext
     *
     * @return string|null
     */
    public function getUrlContext()
    {
        return $this->container['urlContext'];
    }

    /**
     * Sets urlContext
     *
     * @param string|null $urlContext urlContext
     *
     * @return $this
     */
    public function setUrlContext($urlContext)
    {
        $this->container['urlContext'] = $urlContext;

        return $this;
    }

    /**
     * Gets samlResponse
     *
     * @return string|null
     */
    public function getSamlResponse()
    {
        return $this->container['samlResponse'];
    }

    /**
     * Sets samlResponse
     *
     * @param string|null $samlResponse samlResponse
     *
     * @return $this
     */
    public function setSamlResponse($samlResponse)
    {
        $this->container['samlResponse'] = $samlResponse;

        return $this;
    }

    /**
     * Gets relayState
     *
     * @return string|null
     */
    public function getRelayState()
    {
        return $this->container['relayState'];
    }

    /**
     * Sets relayState
     *
     * @param string|null $relayState relayState
     *
     * @return $this
     */
    public function setRelayState($relayState)
    {
        $this->container['relayState'] = $relayState;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


