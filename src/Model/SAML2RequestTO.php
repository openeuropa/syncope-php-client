<?php
/**
 * SAML2RequestTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * SAML2RequestTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SAML2RequestTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SAML2RequestTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'idpServiceAddress' => 'string',
        'bindingType' => 'string',
        'content' => 'string',
        'relayState' => 'string',
        'signAlg' => 'string',
        'signature' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'idpServiceAddress' => null,
        'bindingType' => null,
        'content' => null,
        'relayState' => null,
        'signAlg' => null,
        'signature' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'idpServiceAddress' => 'idpServiceAddress',
        'bindingType' => 'bindingType',
        'content' => 'content',
        'relayState' => 'relayState',
        'signAlg' => 'signAlg',
        'signature' => 'signature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'idpServiceAddress' => 'setIdpServiceAddress',
        'bindingType' => 'setBindingType',
        'content' => 'setContent',
        'relayState' => 'setRelayState',
        'signAlg' => 'setSignAlg',
        'signature' => 'setSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'idpServiceAddress' => 'getIdpServiceAddress',
        'bindingType' => 'getBindingType',
        'content' => 'getContent',
        'relayState' => 'getRelayState',
        'signAlg' => 'getSignAlg',
        'signature' => 'getSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BINDING_TYPE_POST = 'POST';
    const BINDING_TYPE_REDIRECT = 'REDIRECT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBindingTypeAllowableValues()
    {
        return [
            self::BINDING_TYPE_POST,
            self::BINDING_TYPE_REDIRECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['idpServiceAddress'] = isset($data['idpServiceAddress']) ? $data['idpServiceAddress'] : null;
        $this->container['bindingType'] = isset($data['bindingType']) ? $data['bindingType'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['relayState'] = isset($data['relayState']) ? $data['relayState'] : null;
        $this->container['signAlg'] = isset($data['signAlg']) ? $data['signAlg'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBindingTypeAllowableValues();
        if (!is_null($this->container['bindingType']) && !in_array($this->container['bindingType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bindingType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets idpServiceAddress
     *
     * @return string|null
     */
    public function getIdpServiceAddress()
    {
        return $this->container['idpServiceAddress'];
    }

    /**
     * Sets idpServiceAddress
     *
     * @param string|null $idpServiceAddress idpServiceAddress
     *
     * @return $this
     */
    public function setIdpServiceAddress($idpServiceAddress)
    {
        $this->container['idpServiceAddress'] = $idpServiceAddress;

        return $this;
    }

    /**
     * Gets bindingType
     *
     * @return string|null
     */
    public function getBindingType()
    {
        return $this->container['bindingType'];
    }

    /**
     * Sets bindingType
     *
     * @param string|null $bindingType bindingType
     *
     * @return $this
     */
    public function setBindingType($bindingType)
    {
        $allowedValues = $this->getBindingTypeAllowableValues();
        if (!is_null($bindingType) && !in_array($bindingType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bindingType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bindingType'] = $bindingType;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets relayState
     *
     * @return string|null
     */
    public function getRelayState()
    {
        return $this->container['relayState'];
    }

    /**
     * Sets relayState
     *
     * @param string|null $relayState relayState
     *
     * @return $this
     */
    public function setRelayState($relayState)
    {
        $this->container['relayState'] = $relayState;

        return $this;
    }

    /**
     * Gets signAlg
     *
     * @return string|null
     */
    public function getSignAlg()
    {
        return $this->container['signAlg'];
    }

    /**
     * Sets signAlg
     *
     * @param string|null $signAlg signAlg
     *
     * @return $this
     */
    public function setSignAlg($signAlg)
    {
        $this->container['signAlg'] = $signAlg;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


