<?php
/**
 * SCIMUserConf
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenEuropa\SyncopePhpClient\Model;

use \ArrayAccess;
use \OpenEuropa\SyncopePhpClient\ObjectSerializer;

/**
 * SCIMUserConf Class Doc Comment
 *
 * @category Class
 * @package  OpenEuropa\SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SCIMUserConf implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SCIMUserConf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => '\OpenEuropa\SyncopePhpClient\Model\SCIMUserNameConf',
        'displayName' => 'string',
        'nickName' => 'string',
        'profileUrl' => 'string',
        'title' => 'string',
        'userType' => 'string',
        'preferredLanguage' => 'string',
        'locale' => 'string',
        'timezone' => 'string',
        'emails' => '\OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfEmailCanonicalType[]',
        'phoneNumbers' => '\OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfPhoneNumberCanonicalType[]',
        'ims' => '\OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfIMCanonicalType[]',
        'photos' => '\OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfPhotoCanonicalType[]',
        'addresses' => '\OpenEuropa\SyncopePhpClient\Model\SCIMUserAddressConf[]',
        'x509Certificates' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'displayName' => null,
        'nickName' => null,
        'profileUrl' => null,
        'title' => null,
        'userType' => null,
        'preferredLanguage' => null,
        'locale' => null,
        'timezone' => null,
        'emails' => null,
        'phoneNumbers' => null,
        'ims' => null,
        'photos' => null,
        'addresses' => null,
        'x509Certificates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'displayName' => 'displayName',
        'nickName' => 'nickName',
        'profileUrl' => 'profileUrl',
        'title' => 'title',
        'userType' => 'userType',
        'preferredLanguage' => 'preferredLanguage',
        'locale' => 'locale',
        'timezone' => 'timezone',
        'emails' => 'emails',
        'phoneNumbers' => 'phoneNumbers',
        'ims' => 'ims',
        'photos' => 'photos',
        'addresses' => 'addresses',
        'x509Certificates' => 'x509Certificates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'displayName' => 'setDisplayName',
        'nickName' => 'setNickName',
        'profileUrl' => 'setProfileUrl',
        'title' => 'setTitle',
        'userType' => 'setUserType',
        'preferredLanguage' => 'setPreferredLanguage',
        'locale' => 'setLocale',
        'timezone' => 'setTimezone',
        'emails' => 'setEmails',
        'phoneNumbers' => 'setPhoneNumbers',
        'ims' => 'setIms',
        'photos' => 'setPhotos',
        'addresses' => 'setAddresses',
        'x509Certificates' => 'setX509Certificates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'displayName' => 'getDisplayName',
        'nickName' => 'getNickName',
        'profileUrl' => 'getProfileUrl',
        'title' => 'getTitle',
        'userType' => 'getUserType',
        'preferredLanguage' => 'getPreferredLanguage',
        'locale' => 'getLocale',
        'timezone' => 'getTimezone',
        'emails' => 'getEmails',
        'phoneNumbers' => 'getPhoneNumbers',
        'ims' => 'getIms',
        'photos' => 'getPhotos',
        'addresses' => 'getAddresses',
        'x509Certificates' => 'getX509Certificates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['nickName'] = isset($data['nickName']) ? $data['nickName'] : null;
        $this->container['profileUrl'] = isset($data['profileUrl']) ? $data['profileUrl'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['userType'] = isset($data['userType']) ? $data['userType'] : null;
        $this->container['preferredLanguage'] = isset($data['preferredLanguage']) ? $data['preferredLanguage'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['phoneNumbers'] = isset($data['phoneNumbers']) ? $data['phoneNumbers'] : null;
        $this->container['ims'] = isset($data['ims']) ? $data['ims'] : null;
        $this->container['photos'] = isset($data['photos']) ? $data['photos'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['x509Certificates'] = isset($data['x509Certificates']) ? $data['x509Certificates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\SCIMUserNameConf|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\SCIMUserNameConf|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets nickName
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nickName'];
    }

    /**
     * Sets nickName
     *
     * @param string|null $nickName nickName
     *
     * @return $this
     */
    public function setNickName($nickName)
    {
        $this->container['nickName'] = $nickName;

        return $this;
    }

    /**
     * Gets profileUrl
     *
     * @return string|null
     */
    public function getProfileUrl()
    {
        return $this->container['profileUrl'];
    }

    /**
     * Sets profileUrl
     *
     * @param string|null $profileUrl profileUrl
     *
     * @return $this
     */
    public function setProfileUrl($profileUrl)
    {
        $this->container['profileUrl'] = $profileUrl;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets userType
     *
     * @return string|null
     */
    public function getUserType()
    {
        return $this->container['userType'];
    }

    /**
     * Sets userType
     *
     * @param string|null $userType userType
     *
     * @return $this
     */
    public function setUserType($userType)
    {
        $this->container['userType'] = $userType;

        return $this;
    }

    /**
     * Gets preferredLanguage
     *
     * @return string|null
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferredLanguage'];
    }

    /**
     * Sets preferredLanguage
     *
     * @param string|null $preferredLanguage preferredLanguage
     *
     * @return $this
     */
    public function setPreferredLanguage($preferredLanguage)
    {
        $this->container['preferredLanguage'] = $preferredLanguage;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfEmailCanonicalType[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfEmailCanonicalType[]|null $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets phoneNumbers
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfPhoneNumberCanonicalType[]|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phoneNumbers'];
    }

    /**
     * Sets phoneNumbers
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfPhoneNumberCanonicalType[]|null $phoneNumbers phoneNumbers
     *
     * @return $this
     */
    public function setPhoneNumbers($phoneNumbers)
    {
        $this->container['phoneNumbers'] = $phoneNumbers;

        return $this;
    }

    /**
     * Gets ims
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfIMCanonicalType[]|null
     */
    public function getIms()
    {
        return $this->container['ims'];
    }

    /**
     * Sets ims
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfIMCanonicalType[]|null $ims ims
     *
     * @return $this
     */
    public function setIms($ims)
    {
        $this->container['ims'] = $ims;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfPhotoCanonicalType[]|null
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\SCIMComplexConfPhotoCanonicalType[]|null $photos photos
     *
     * @return $this
     */
    public function setPhotos($photos)
    {
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenEuropa\SyncopePhpClient\Model\SCIMUserAddressConf[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenEuropa\SyncopePhpClient\Model\SCIMUserAddressConf[]|null $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets x509Certificates
     *
     * @return string[]|null
     */
    public function getX509Certificates()
    {
        return $this->container['x509Certificates'];
    }

    /**
     * Sets x509Certificates
     *
     * @param string[]|null $x509Certificates x509Certificates
     *
     * @return $this
     */
    public function setX509Certificates($x509Certificates)
    {
        $this->container['x509Certificates'] = $x509Certificates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


