<?php
/**
 * AnyPatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * AnyPatch Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnyPatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = '@class';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnyPatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'class' => 'string',
        'key' => 'string',
        'realm' => '\SyncopePhpClient\Model\StringReplacePatchItem',
        'auxClasses' => '\SyncopePhpClient\Model\StringPatchItem[]',
        'plainAttrs' => '\SyncopePhpClient\Model\AttrPatch[]',
        'virAttrs' => '\SyncopePhpClient\Model\AttrTO[]',
        'resources' => '\SyncopePhpClient\Model\StringPatchItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'class' => null,
        'key' => null,
        'realm' => null,
        'auxClasses' => null,
        'plainAttrs' => null,
        'virAttrs' => null,
        'resources' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class' => '@class',
        'key' => 'key',
        'realm' => 'realm',
        'auxClasses' => 'auxClasses',
        'plainAttrs' => 'plainAttrs',
        'virAttrs' => 'virAttrs',
        'resources' => 'resources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class' => 'setClass',
        'key' => 'setKey',
        'realm' => 'setRealm',
        'auxClasses' => 'setAuxClasses',
        'plainAttrs' => 'setPlainAttrs',
        'virAttrs' => 'setVirAttrs',
        'resources' => 'setResources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class' => 'getClass',
        'key' => 'getKey',
        'realm' => 'getRealm',
        'auxClasses' => 'getAuxClasses',
        'plainAttrs' => 'getPlainAttrs',
        'virAttrs' => 'getVirAttrs',
        'resources' => 'getResources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['realm'] = isset($data['realm']) ? $data['realm'] : null;
        $this->container['auxClasses'] = isset($data['auxClasses']) ? $data['auxClasses'] : null;
        $this->container['plainAttrs'] = isset($data['plainAttrs']) ? $data['plainAttrs'] : null;
        $this->container['virAttrs'] = isset($data['virAttrs']) ? $data['virAttrs'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('@class', self::$attributeMap);
        $this->container[$discriminator] = static::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['class'] === null) {
            $invalidProperties[] = "'class' can't be null";
        }
        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class class
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets realm
     *
     * @return \SyncopePhpClient\Model\StringReplacePatchItem|null
     */
    public function getRealm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param \SyncopePhpClient\Model\StringReplacePatchItem|null $realm realm
     *
     * @return $this
     */
    public function setRealm($realm)
    {
        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets auxClasses
     *
     * @return \SyncopePhpClient\Model\StringPatchItem[]|null
     */
    public function getAuxClasses()
    {
        return $this->container['auxClasses'];
    }

    /**
     * Sets auxClasses
     *
     * @param \SyncopePhpClient\Model\StringPatchItem[]|null $auxClasses auxClasses
     *
     * @return $this
     */
    public function setAuxClasses($auxClasses)
    {
        $this->container['auxClasses'] = $auxClasses;

        return $this;
    }

    /**
     * Gets plainAttrs
     *
     * @return \SyncopePhpClient\Model\AttrPatch[]|null
     */
    public function getPlainAttrs()
    {
        return $this->container['plainAttrs'];
    }

    /**
     * Sets plainAttrs
     *
     * @param \SyncopePhpClient\Model\AttrPatch[]|null $plainAttrs plainAttrs
     *
     * @return $this
     */
    public function setPlainAttrs($plainAttrs)
    {
        $this->container['plainAttrs'] = $plainAttrs;

        return $this;
    }

    /**
     * Gets virAttrs
     *
     * @return \SyncopePhpClient\Model\AttrTO[]|null
     */
    public function getVirAttrs()
    {
        return $this->container['virAttrs'];
    }

    /**
     * Sets virAttrs
     *
     * @param \SyncopePhpClient\Model\AttrTO[]|null $virAttrs virAttrs
     *
     * @return $this
     */
    public function setVirAttrs($virAttrs)
    {
        $this->container['virAttrs'] = $virAttrs;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return \SyncopePhpClient\Model\StringPatchItem[]|null
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param \SyncopePhpClient\Model\StringPatchItem[]|null $resources resources
     *
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


