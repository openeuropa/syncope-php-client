<?php
/**
 * ImplementationTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * ImplementationTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImplementationTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImplementationTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'engine' => 'string',
        'type' => 'string',
        'body' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'engine' => null,
        'type' => null,
        'body' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'engine' => 'engine',
        'type' => 'type',
        'body' => 'body'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'engine' => 'setEngine',
        'type' => 'setType',
        'body' => 'setBody'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'engine' => 'getEngine',
        'type' => 'getType',
        'body' => 'getBody'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ENGINE_JAVA = 'JAVA';
    const ENGINE_GROOVY = 'GROOVY';
    const TYPE_JWT_SSO_PROVIDER = 'JWT_SSO_PROVIDER';
    const TYPE_REPORTLET = 'REPORTLET';
    const TYPE_ACCOUNT_RULE = 'ACCOUNT_RULE';
    const TYPE_PASSWORD_RULE = 'PASSWORD_RULE';
    const TYPE_ITEM_TRANSFORMER = 'ITEM_TRANSFORMER';
    const TYPE_TASKJOB_DELEGATE = 'TASKJOB_DELEGATE';
    const TYPE_RECON_FILTER_BUILDER = 'RECON_FILTER_BUILDER';
    const TYPE_LOGIC_ACTIONS = 'LOGIC_ACTIONS';
    const TYPE_PROPAGATION_ACTIONS = 'PROPAGATION_ACTIONS';
    const TYPE_PULL_ACTIONS = 'PULL_ACTIONS';
    const TYPE_PUSH_ACTIONS = 'PUSH_ACTIONS';
    const TYPE_PULL_CORRELATION_RULE = 'PULL_CORRELATION_RULE';
    const TYPE_PUSH_CORRELATION_RULE = 'PUSH_CORRELATION_RULE';
    const TYPE_VALIDATOR = 'VALIDATOR';
    const TYPE_RECIPIENTS_PROVIDER = 'RECIPIENTS_PROVIDER';
    const TYPE_AUDIT_APPENDER = 'AUDIT_APPENDER';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEngineAllowableValues()
    {
        return [
            self::ENGINE_JAVA,
            self::ENGINE_GROOVY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_JWT_SSO_PROVIDER,
            self::TYPE_REPORTLET,
            self::TYPE_ACCOUNT_RULE,
            self::TYPE_PASSWORD_RULE,
            self::TYPE_ITEM_TRANSFORMER,
            self::TYPE_TASKJOB_DELEGATE,
            self::TYPE_RECON_FILTER_BUILDER,
            self::TYPE_LOGIC_ACTIONS,
            self::TYPE_PROPAGATION_ACTIONS,
            self::TYPE_PULL_ACTIONS,
            self::TYPE_PUSH_ACTIONS,
            self::TYPE_PULL_CORRELATION_RULE,
            self::TYPE_PUSH_CORRELATION_RULE,
            self::TYPE_VALIDATOR,
            self::TYPE_RECIPIENTS_PROVIDER,
            self::TYPE_AUDIT_APPENDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['engine'] = isset($data['engine']) ? $data['engine'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEngineAllowableValues();
        if (!is_null($this->container['engine']) && !in_array($this->container['engine'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'engine', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets engine
     *
     * @return string|null
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param string|null $engine engine
     *
     * @return $this
     */
    public function setEngine($engine)
    {
        $allowedValues = $this->getEngineAllowableValues();
        if (!is_null($engine) && !in_array($engine, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'engine', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


