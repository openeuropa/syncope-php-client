<?php
/**
 * NotificationTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * NotificationTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NotificationTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NotificationTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'abouts' => 'map[string,string]',
        'recipientsFIQL' => 'string',
        'recipientAttrName' => 'string',
        'selfAsRecipient' => 'bool',
        'recipientsProvider' => 'string',
        'sender' => 'string',
        'subject' => 'string',
        'template' => 'string',
        'traceLevel' => 'string',
        'active' => 'bool',
        'events' => 'string[]',
        'staticRecipients' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'abouts' => null,
        'recipientsFIQL' => null,
        'recipientAttrName' => null,
        'selfAsRecipient' => null,
        'recipientsProvider' => null,
        'sender' => null,
        'subject' => null,
        'template' => null,
        'traceLevel' => null,
        'active' => null,
        'events' => null,
        'staticRecipients' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'abouts' => 'abouts',
        'recipientsFIQL' => 'recipientsFIQL',
        'recipientAttrName' => 'recipientAttrName',
        'selfAsRecipient' => 'selfAsRecipient',
        'recipientsProvider' => 'recipientsProvider',
        'sender' => 'sender',
        'subject' => 'subject',
        'template' => 'template',
        'traceLevel' => 'traceLevel',
        'active' => 'active',
        'events' => 'events',
        'staticRecipients' => 'staticRecipients'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'abouts' => 'setAbouts',
        'recipientsFIQL' => 'setRecipientsFIQL',
        'recipientAttrName' => 'setRecipientAttrName',
        'selfAsRecipient' => 'setSelfAsRecipient',
        'recipientsProvider' => 'setRecipientsProvider',
        'sender' => 'setSender',
        'subject' => 'setSubject',
        'template' => 'setTemplate',
        'traceLevel' => 'setTraceLevel',
        'active' => 'setActive',
        'events' => 'setEvents',
        'staticRecipients' => 'setStaticRecipients'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'abouts' => 'getAbouts',
        'recipientsFIQL' => 'getRecipientsFIQL',
        'recipientAttrName' => 'getRecipientAttrName',
        'selfAsRecipient' => 'getSelfAsRecipient',
        'recipientsProvider' => 'getRecipientsProvider',
        'sender' => 'getSender',
        'subject' => 'getSubject',
        'template' => 'getTemplate',
        'traceLevel' => 'getTraceLevel',
        'active' => 'getActive',
        'events' => 'getEvents',
        'staticRecipients' => 'getStaticRecipients'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRACE_LEVEL_NONE = 'NONE';
    const TRACE_LEVEL_FAILURES = 'FAILURES';
    const TRACE_LEVEL_SUMMARY = 'SUMMARY';
    const TRACE_LEVEL_ALL = 'ALL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTraceLevelAllowableValues()
    {
        return [
            self::TRACE_LEVEL_NONE,
            self::TRACE_LEVEL_FAILURES,
            self::TRACE_LEVEL_SUMMARY,
            self::TRACE_LEVEL_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['abouts'] = isset($data['abouts']) ? $data['abouts'] : null;
        $this->container['recipientsFIQL'] = isset($data['recipientsFIQL']) ? $data['recipientsFIQL'] : null;
        $this->container['recipientAttrName'] = isset($data['recipientAttrName']) ? $data['recipientAttrName'] : null;
        $this->container['selfAsRecipient'] = isset($data['selfAsRecipient']) ? $data['selfAsRecipient'] : null;
        $this->container['recipientsProvider'] = isset($data['recipientsProvider']) ? $data['recipientsProvider'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['traceLevel'] = isset($data['traceLevel']) ? $data['traceLevel'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['staticRecipients'] = isset($data['staticRecipients']) ? $data['staticRecipients'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTraceLevelAllowableValues();
        if (!is_null($this->container['traceLevel']) && !in_array($this->container['traceLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'traceLevel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets abouts
     *
     * @return map[string,string]|null
     */
    public function getAbouts()
    {
        return $this->container['abouts'];
    }

    /**
     * Sets abouts
     *
     * @param map[string,string]|null $abouts abouts
     *
     * @return $this
     */
    public function setAbouts($abouts)
    {
        $this->container['abouts'] = $abouts;

        return $this;
    }

    /**
     * Gets recipientsFIQL
     *
     * @return string|null
     */
    public function getRecipientsFIQL()
    {
        return $this->container['recipientsFIQL'];
    }

    /**
     * Sets recipientsFIQL
     *
     * @param string|null $recipientsFIQL recipientsFIQL
     *
     * @return $this
     */
    public function setRecipientsFIQL($recipientsFIQL)
    {
        $this->container['recipientsFIQL'] = $recipientsFIQL;

        return $this;
    }

    /**
     * Gets recipientAttrName
     *
     * @return string|null
     */
    public function getRecipientAttrName()
    {
        return $this->container['recipientAttrName'];
    }

    /**
     * Sets recipientAttrName
     *
     * @param string|null $recipientAttrName recipientAttrName
     *
     * @return $this
     */
    public function setRecipientAttrName($recipientAttrName)
    {
        $this->container['recipientAttrName'] = $recipientAttrName;

        return $this;
    }

    /**
     * Gets selfAsRecipient
     *
     * @return bool|null
     */
    public function getSelfAsRecipient()
    {
        return $this->container['selfAsRecipient'];
    }

    /**
     * Sets selfAsRecipient
     *
     * @param bool|null $selfAsRecipient selfAsRecipient
     *
     * @return $this
     */
    public function setSelfAsRecipient($selfAsRecipient)
    {
        $this->container['selfAsRecipient'] = $selfAsRecipient;

        return $this;
    }

    /**
     * Gets recipientsProvider
     *
     * @return string|null
     */
    public function getRecipientsProvider()
    {
        return $this->container['recipientsProvider'];
    }

    /**
     * Sets recipientsProvider
     *
     * @param string|null $recipientsProvider recipientsProvider
     *
     * @return $this
     */
    public function setRecipientsProvider($recipientsProvider)
    {
        $this->container['recipientsProvider'] = $recipientsProvider;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string|null $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets traceLevel
     *
     * @return string|null
     */
    public function getTraceLevel()
    {
        return $this->container['traceLevel'];
    }

    /**
     * Sets traceLevel
     *
     * @param string|null $traceLevel traceLevel
     *
     * @return $this
     */
    public function setTraceLevel($traceLevel)
    {
        $allowedValues = $this->getTraceLevelAllowableValues();
        if (!is_null($traceLevel) && !in_array($traceLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'traceLevel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['traceLevel'] = $traceLevel;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets events
     *
     * @return string[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param string[]|null $events events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets staticRecipients
     *
     * @return string[]|null
     */
    public function getStaticRecipients()
    {
        return $this->container['staticRecipients'];
    }

    /**
     * Sets staticRecipients
     *
     * @param string[]|null $staticRecipients staticRecipients
     *
     * @return $this
     */
    public function setStaticRecipients($staticRecipients)
    {
        $this->container['staticRecipients'] = $staticRecipients;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


