<?php
/**
 * SAML2LoginResponseTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apache Syncope
 *
 * Apache Syncope 2.1.2-SNAPSHOT
 *
 * OpenAPI spec version: 2.1.2-SNAPSHOT
 * Contact: dev@syncope.apache.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SyncopePhpClient\Model;

use \ArrayAccess;
use \SyncopePhpClient\ObjectSerializer;

/**
 * SAML2LoginResponseTO Class Doc Comment
 *
 * @category Class
 * @package  SyncopePhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SAML2LoginResponseTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SAML2LoginResponseTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nameID' => 'string',
        'sessionIndex' => 'string',
        'authInstant' => '\DateTime',
        'notOnOrAfter' => '\DateTime',
        'accessToken' => 'string',
        'accessTokenExpiryTime' => '\DateTime',
        'username' => 'string',
        'idp' => 'string',
        'sloSupported' => 'bool',
        'selfReg' => 'bool',
        'attrs' => '\SyncopePhpClient\Model\AttrTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'nameID' => null,
        'sessionIndex' => null,
        'authInstant' => 'date-time',
        'notOnOrAfter' => 'date-time',
        'accessToken' => null,
        'accessTokenExpiryTime' => 'date-time',
        'username' => null,
        'idp' => null,
        'sloSupported' => null,
        'selfReg' => null,
        'attrs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nameID' => 'nameID',
        'sessionIndex' => 'sessionIndex',
        'authInstant' => 'authInstant',
        'notOnOrAfter' => 'notOnOrAfter',
        'accessToken' => 'accessToken',
        'accessTokenExpiryTime' => 'accessTokenExpiryTime',
        'username' => 'username',
        'idp' => 'idp',
        'sloSupported' => 'sloSupported',
        'selfReg' => 'selfReg',
        'attrs' => 'attrs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nameID' => 'setNameID',
        'sessionIndex' => 'setSessionIndex',
        'authInstant' => 'setAuthInstant',
        'notOnOrAfter' => 'setNotOnOrAfter',
        'accessToken' => 'setAccessToken',
        'accessTokenExpiryTime' => 'setAccessTokenExpiryTime',
        'username' => 'setUsername',
        'idp' => 'setIdp',
        'sloSupported' => 'setSloSupported',
        'selfReg' => 'setSelfReg',
        'attrs' => 'setAttrs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nameID' => 'getNameID',
        'sessionIndex' => 'getSessionIndex',
        'authInstant' => 'getAuthInstant',
        'notOnOrAfter' => 'getNotOnOrAfter',
        'accessToken' => 'getAccessToken',
        'accessTokenExpiryTime' => 'getAccessTokenExpiryTime',
        'username' => 'getUsername',
        'idp' => 'getIdp',
        'sloSupported' => 'getSloSupported',
        'selfReg' => 'getSelfReg',
        'attrs' => 'getAttrs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nameID'] = isset($data['nameID']) ? $data['nameID'] : null;
        $this->container['sessionIndex'] = isset($data['sessionIndex']) ? $data['sessionIndex'] : null;
        $this->container['authInstant'] = isset($data['authInstant']) ? $data['authInstant'] : null;
        $this->container['notOnOrAfter'] = isset($data['notOnOrAfter']) ? $data['notOnOrAfter'] : null;
        $this->container['accessToken'] = isset($data['accessToken']) ? $data['accessToken'] : null;
        $this->container['accessTokenExpiryTime'] = isset($data['accessTokenExpiryTime']) ? $data['accessTokenExpiryTime'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['idp'] = isset($data['idp']) ? $data['idp'] : null;
        $this->container['sloSupported'] = isset($data['sloSupported']) ? $data['sloSupported'] : null;
        $this->container['selfReg'] = isset($data['selfReg']) ? $data['selfReg'] : null;
        $this->container['attrs'] = isset($data['attrs']) ? $data['attrs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nameID
     *
     * @return string|null
     */
    public function getNameID()
    {
        return $this->container['nameID'];
    }

    /**
     * Sets nameID
     *
     * @param string|null $nameID nameID
     *
     * @return $this
     */
    public function setNameID($nameID)
    {
        $this->container['nameID'] = $nameID;

        return $this;
    }

    /**
     * Gets sessionIndex
     *
     * @return string|null
     */
    public function getSessionIndex()
    {
        return $this->container['sessionIndex'];
    }

    /**
     * Sets sessionIndex
     *
     * @param string|null $sessionIndex sessionIndex
     *
     * @return $this
     */
    public function setSessionIndex($sessionIndex)
    {
        $this->container['sessionIndex'] = $sessionIndex;

        return $this;
    }

    /**
     * Gets authInstant
     *
     * @return \DateTime|null
     */
    public function getAuthInstant()
    {
        return $this->container['authInstant'];
    }

    /**
     * Sets authInstant
     *
     * @param \DateTime|null $authInstant authInstant
     *
     * @return $this
     */
    public function setAuthInstant($authInstant)
    {
        $this->container['authInstant'] = $authInstant;

        return $this;
    }

    /**
     * Gets notOnOrAfter
     *
     * @return \DateTime|null
     */
    public function getNotOnOrAfter()
    {
        return $this->container['notOnOrAfter'];
    }

    /**
     * Sets notOnOrAfter
     *
     * @param \DateTime|null $notOnOrAfter notOnOrAfter
     *
     * @return $this
     */
    public function setNotOnOrAfter($notOnOrAfter)
    {
        $this->container['notOnOrAfter'] = $notOnOrAfter;

        return $this;
    }

    /**
     * Gets accessToken
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['accessToken'];
    }

    /**
     * Sets accessToken
     *
     * @param string|null $accessToken accessToken
     *
     * @return $this
     */
    public function setAccessToken($accessToken)
    {
        $this->container['accessToken'] = $accessToken;

        return $this;
    }

    /**
     * Gets accessTokenExpiryTime
     *
     * @return \DateTime|null
     */
    public function getAccessTokenExpiryTime()
    {
        return $this->container['accessTokenExpiryTime'];
    }

    /**
     * Sets accessTokenExpiryTime
     *
     * @param \DateTime|null $accessTokenExpiryTime accessTokenExpiryTime
     *
     * @return $this
     */
    public function setAccessTokenExpiryTime($accessTokenExpiryTime)
    {
        $this->container['accessTokenExpiryTime'] = $accessTokenExpiryTime;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets idp
     *
     * @return string|null
     */
    public function getIdp()
    {
        return $this->container['idp'];
    }

    /**
     * Sets idp
     *
     * @param string|null $idp idp
     *
     * @return $this
     */
    public function setIdp($idp)
    {
        $this->container['idp'] = $idp;

        return $this;
    }

    /**
     * Gets sloSupported
     *
     * @return bool|null
     */
    public function getSloSupported()
    {
        return $this->container['sloSupported'];
    }

    /**
     * Sets sloSupported
     *
     * @param bool|null $sloSupported sloSupported
     *
     * @return $this
     */
    public function setSloSupported($sloSupported)
    {
        $this->container['sloSupported'] = $sloSupported;

        return $this;
    }

    /**
     * Gets selfReg
     *
     * @return bool|null
     */
    public function getSelfReg()
    {
        return $this->container['selfReg'];
    }

    /**
     * Sets selfReg
     *
     * @param bool|null $selfReg selfReg
     *
     * @return $this
     */
    public function setSelfReg($selfReg)
    {
        $this->container['selfReg'] = $selfReg;

        return $this;
    }

    /**
     * Gets attrs
     *
     * @return \SyncopePhpClient\Model\AttrTO[]|null
     */
    public function getAttrs()
    {
        return $this->container['attrs'];
    }

    /**
     * Sets attrs
     *
     * @param \SyncopePhpClient\Model\AttrTO[]|null $attrs attrs
     *
     * @return $this
     */
    public function setAttrs($attrs)
    {
        $this->container['attrs'] = $attrs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


